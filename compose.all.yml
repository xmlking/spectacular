version: "3.9"

###########################################################################
# top-level Extensions
###########################################################################
x-streams-user: &streams-user root
x-extra_hosts: &extra_hosts
  extra_hosts:
      - host.docker.internal:host-gateway
      - traefik.${BASE_HOSTNAME}:host-gateway
      - postgres.${BASE_HOSTNAME}:host-gateway
      - hasura.${BASE_HOSTNAME}:host-gateway
      - auth.${BASE_HOSTNAME}:host-gateway
      - storage.${BASE_HOSTNAME}:host-gateway
      - console.${BASE_HOSTNAME}:host-gateway
###########################################################################
# top-level Config
# `user` password: user
# `admin` password: admin
###########################################################################
configs:
  .htpasswd:
    content: |
      user:$$apr1$$YOwuFkyc$$Exhx4Xoe0c.5SEDKjC3kz1
      admin:$$apr1$$6Rri7sub$$PmETYWtbZZaiL6QdtELte1

###########################################################################
# top-level Secrets
###########################################################################
secrets:
  authorized_keys:
    file: .secrets

services:
  ###########################################################################
  # traefik proxy
  ###########################################################################
  traefik:
    image: traefik:v3.0.0-rc1
    hostname: traefik
    container_name: traefik
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infra/base/traefik:/etc/traefik:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
      timeout: 60s
      interval: 15s
      start_period: 60s
    labels:
      traefik.enable: "true"
      traefik.http.routers.traefik.entrypoints: web,websecure
      traefik.http.routers.traefik.rule: Host(`traefik.${BASE_HOSTNAME}`)
      traefik.http.routers.traefik.tls: "true"
      traefik.http.services.traefik.loadbalancer.server.port: "8080"
  ###########################################################################
  # postgres database
  ###########################################################################
  postgres:
    image: postgres:16
    restart: always
    hostname: postgres
    container_name: postgres
    command: >
      -c ssl=on
      -c ssl_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem
      -c ssl_key_file=/etc/ssl/private/ssl-cert-snakeoil.key
      -c wal_level=logical
      -c max_wal_senders=10
      -c max_replication_slots=10
    #   -c listen_addresses = '*'
    ports:
      - '5432:5432'
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: postgres
    volumes:
      - pgdata:/var/lib/postgresql/data
      # - ./infra/base/postgres/initdb.d:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres -d postgres -q']
      # test: ['CMD-SHELL', 'pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB']
      timeout: 60s
      interval: 15s
      start_period: 60s
    depends_on:
      traefik:
        condition: service_healthy
  ###########################################################################
  # hasura
  ###########################################################################
  hasura:
    ## User `cli-migrations-v3` only in local dev env.
    ## It will automatically apply Migrations and Metadata to a Hasura GraphQL Engine
    image: hasura/graphql-engine:v2.37.0
    hostname: hasura
    container_name: hasura
    restart: always
    expose:
      - 8080
    environment:
      HASURA_GRAPHQL_DATABASE_URL: postgres://postgres:${POSTGRES_PASSWORD:-postgres}@postgres:5432/postgres?sslmode=allow
      # HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://postgres:${POSTGRES_PASSWORD:-postgres}@postgres:5432/postgres?sslmode=allow
      HASURA_GRAPHQL_JWT_SECRET: '{ "type": "HS256", "key": "${HASURA_GRAPHQL_JWT_SECRET_KEY}"}'
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_GRAPHQL_ADMIN_SECRET:-nhost-admin-secret}
      HASURA_GRAPHQL_DEV_MODE: 'true'
      HASURA_GRAPHQL_ENABLE_CONSOLE: 'true'
      HASURA_GRAPHQL_LOG_LEVEL: info
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup
      HASURA_GRAPHQL_UNAUTHORIZED_ROLE: public
      HASURA_GRAPHQL_ENABLE_TELEMETRY: 'false'
      HASURA_GRAPHQL_CORS_DOMAIN: '*'
    healthcheck:
      test: curl --fail -s http://localhost:8080/healthz || exit 1
      timeout: 60s
      interval: 15s
      start_period: 60s
    depends_on:
      traefik:
        condition: service_healthy
      postgres:
        condition: service_healthy
    labels:
      traefik.enable: "true"
      traefik.http.routers.hasura.entrypoints: websecure
      traefik.http.routers.hasura.rule: Host(`hasura.${BASE_HOSTNAME}`) && PathPrefix(`/`)
      traefik.http.routers.hasura.service: hasura
      traefik.http.routers.hasura.tls: "true"
      traefik.http.services.hasura.loadbalancer.server.port: "8080"
  ###########################################################################
  # hasura auth
  ###########################################################################
  auth:
    image: nhost/hasura-auth:0.25
    hostname: auth
    container_name: auth
    restart: always
    volumes:
      - ./nhost/emails:/app/email-templates
    environment:
      AUTH_LOG_LEVEL: info
      AUTH_ACCESS_CONTROL_ALLOWED_EMAIL_DOMAINS: ""
      AUTH_ACCESS_CONTROL_ALLOWED_EMAILS: ""
      AUTH_ACCESS_CONTROL_ALLOWED_REDIRECT_URLS: https://console.${BASE_HOSTNAME},https://*.vercel.app/
      AUTH_ACCESS_CONTROL_BLOCKED_EMAIL_DOMAINS: ""
      AUTH_ACCESS_CONTROL_BLOCKED_EMAILS: ""
      AUTH_ACCESS_TOKEN_EXPIRES_IN: "900"
      AUTH_ANONYMOUS_USERS_ENABLED: "false"
      AUTH_API_PREFIX: /v1
      AUTH_CLIENT_URL: ${AUTH_CLIENT_URL:-https://console.${BASE_HOSTNAME}}
      AUTH_DISABLE_NEW_USERS: "false"
      AUTH_DISABLE_SIGNUP: "false"
      AUTH_EMAIL_PASSWORDLESS_ENABLED: "true"
      AUTH_EMAIL_SIGNIN_EMAIL_VERIFIED_REQUIRED: "false"
      AUTH_GRAVATAR_DEFAULT: mp
      AUTH_GRAVATAR_ENABLED: "true"
      AUTH_GRAVATAR_RATING: g
      AUTH_HOST: 0.0.0.0
      AUTH_JWT_CUSTOM_CLAIMS: '{"default-org":"metadata.org","orgs":"organizations[].organization","user-email":"email"}'
      AUTH_LOCALE_ALLOWED_LOCALES: en
      AUTH_LOCALE_DEFAULT: en
      AUTH_MFA_ENABLED: "true"
      AUTH_MFA_TOTP_ISSUER: Spectacular
      AUTH_PASSWORD_HIBP_ENABLED: "false"
      AUTH_PASSWORD_MIN_LENGTH: "9"
      AUTH_PORT: "4000"
      AUTH_PROVIDER_AZUREAD_CLIENT_ID: ${AUTH_PROVIDER_AZUREAD_CLIENT_ID}
      AUTH_PROVIDER_AZUREAD_CLIENT_SECRET: ${AUTH_PROVIDER_AZUREAD_CLIENT_SECRET}
      AUTH_PROVIDER_AZUREAD_ENABLED: "true"
      AUTH_PROVIDER_AZUREAD_TENANT: ${AUTH_PROVIDER_AZUREAD_TENANT}
      AUTH_PROVIDER_GITHUB_CLIENT_ID: ${AUTH_PROVIDER_GITHUB_CLIENT_ID}
      AUTH_PROVIDER_GITHUB_CLIENT_SECRET: ${AUTH_PROVIDER_GITHUB_CLIENT_SECRET}
      AUTH_PROVIDER_GITHUB_ENABLED: "true"
      AUTH_PROVIDER_GOOGLE_CLIENT_ID: ${AUTH_PROVIDER_GOOGLE_CLIENT_ID}
      AUTH_PROVIDER_GOOGLE_CLIENT_SECRET: ${AUTH_PROVIDER_GOOGLE_CLIENT_SECRET}
      AUTH_PROVIDER_GOOGLE_ENABLED: "true"
      AUTH_PROVIDER_GOOGLE_SCOPE: ""
      AUTH_REFRESH_TOKEN_EXPIRES_IN: "43200"
      AUTH_SERVER_URL: https://auth.${BASE_HOSTNAME}/v1
      AUTH_SMTP_AUTH_METHOD: ${AUTH_SMTP_AUTH_METHOD:-LOGIN}
      AUTH_SMTP_HOST: ${AUTH_SMTP_HOST:-mailpit}
      AUTH_SMTP_PORT: ${AUTH_SMTP_PORT:-1025}
      AUTH_SMTP_USER: ${AUTH_SMTP_USER:-user}
      AUTH_SMTP_PASS: ${AUTH_SMTP_PASS:-password}
      AUTH_SMTP_SECURE: ${AUTH_SMTP_SECURE:-false}
      AUTH_SMTP_SENDER: ${AUTH_SMTP_SENDER:-hasura-auth@example.com}
      AUTH_USER_DEFAULT_ALLOWED_ROLES: user,me,manager,supervisor,engine
      AUTH_USER_DEFAULT_ROLE: user
      AUTH_WEBAUTHN_ATTESTATION_TIMEOUT: "60000"
      AUTH_WEBAUTHN_ENABLED: "true"
      AUTH_WEBAUTHN_RP_ID: Spectacular
      AUTH_WEBAUTHN_RP_NAME: Spectacular Console App
      AUTH_WEBAUTHN_RP_ORIGINS: ${AUTH_CLIENT_URL:-https://console.${BASE_HOSTNAME}}
      HASURA_GRAPHQL_DATABASE_URL: postgres://postgres:${POSTGRES_PASSWORD:-postgres}@postgres:5432/postgres
      HASURA_GRAPHQL_GRAPHQL_URL: http://hasura:8080/v1/graphql
      HASURA_GRAPHQL_JWT_SECRET: '{ "type": "HS256", "key": "${HASURA_GRAPHQL_JWT_SECRET_KEY}"}'
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_GRAPHQL_ADMIN_SECRET:-nhost-admin-secret}
    expose:
      - 4000
    healthcheck:
      test:
          - CMD
          - wget
          - --spider
          - -S
          - http://localhost:4000/healthz
      timeout: 60s
      interval: 15s
      start_period: 60s
    depends_on:
      traefik:
        condition: service_healthy
      postgres:
        condition: service_healthy
      hasura:
        condition: service_healthy
    labels:
      traefik.enable: "true"
      traefik.http.routers.auth.entrypoints: websecure
      traefik.http.routers.auth.rule: Host(`auth.${BASE_HOSTNAME}`)
      traefik.http.routers.auth.service: auth
      traefik.http.routers.auth.tls: "true"
      traefik.http.services.auth.loadbalancer.server.port: "4000"
  ###########################################################################
  # console WebApp
  ###########################################################################
  console:
    image: ghcr.io/xmlking/spectacular/console:v0.1.3
    hostname: console
    container_name: console
    restart: always
    environment:
      AUTH_CLIENT_URL: https://console.${BASE_HOSTNAME}
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_GRAPHQL_ADMIN_SECRET:-nhost-admin-secret}
      NHOST_AUTH_URL: https://auth.${BASE_HOSTNAME}/v1
      NHOST_FUNCTIONS_URL: https://functions.${BASE_HOSTNAME}/v1
      NHOST_GRAPHQL_URL: https://hasura.${BASE_HOSTNAME}/v1
      NHOST_HASURA_URL: https://hasura.${BASE_HOSTNAME}/console
      NHOST_STORAGE_URL: https://storage.${BASE_HOSTNAME}/v1
      NODE_ENV: production
      PUBLIC_BASE_URL: https://lockboard.${BASE_HOSTNAME}
      PUBLIC_GRAPHQL_ENDPOINT: https://hasura.${BASE_HOSTNAME}/v1/graphql
      PUBLIC_TERMS_PRIVACY_APP_NAME: 'Your App'
      PUBLIC_TERMS_PRIVACY_APP_PRICING_AND_SUBSCRIPTIONS: '[Details about the pricing, subscription model, refund policy]'
      PUBLIC_TERMS_PRIVACY_COMPANY: 'Your Company'
      PUBLIC_TERMS_PRIVACY_CONTACT_EMAIL: 'yourname@email.com'
      PUBLIC_TERMS_PRIVACY_COUNTRY: 'United States'
      PUBLIC_TERMS_PRIVACY_EFFECTIVE_DATE: 'January 1, 2024'
      PUBLIC_TERMS_PRIVACY_WEBSITE: 'yourdomain.com'
    expose:
      - 3000
    depends_on:
      auth:
        condition: service_healthy
    <<: *extra_hosts
    labels:
      traefik.enable: "true"
      traefik.http.routers.console.entrypoints: websecure
      traefik.http.routers.console.rule: Host(`console.${BASE_HOSTNAME}`) && PathPrefix(`/`)
      traefik.http.routers.console.service: console
      traefik.http.routers.console.tls: "true"
      traefik.http.services.console.loadbalancer.server.port: "3000"
###########################################################################
# volumes
###########################################################################
volumes:
    pgdata: {}
