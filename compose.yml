###########################################################################
# top-level Extensions
###########################################################################
x-streams-user: &streams-user root
x-extra_hosts: &extra_hosts
  extra_hosts:
      - host.docker.internal:host-gateway
      - auth${BASE_HOSTNAME}:host-gateway
      - console${BASE_HOSTNAME}:host-gateway
      - db${BASE_HOSTNAME}:host-gateway
      - functions${BASE_HOSTNAME}:host-gateway
      - gateway${BASE_HOSTNAME}:host-gateway
      - graphql${BASE_HOSTNAME}:host-gateway
      - hasura${BASE_HOSTNAME}:host-gateway
      - storage${BASE_HOSTNAME}:host-gateway
      - traefik${BASE_HOSTNAME}:host-gateway

services:
  ###########################################################################
  # traefik proxy
  ###########################################################################
  traefik:
    image: traefik:v3.0.0-rc5
    hostname: traefik
    container_name: traefik
    restart: unless-stopped
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./infra/base/traefik:/etc/traefik:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - certs:/etc/ssl/traefik:ro
    healthcheck:
      test: ['CMD', 'traefik', 'healthcheck', '--ping']
      interval: 60s
      start_period: 1m
      start_interval: 10s
      timeout: 15s
      retries: 5
    labels:
      traefik.enable: "true"
      traefik.http.routers.traefik.entrypoints: web,websecure
      traefik.http.routers.traefik.rule: Host(`traefik${BASE_HOSTNAME}`)
      traefik.http.routers.traefik.tls: "true"
      traefik.http.routers.traefik.middlewares: traefik-auth
      traefik.http.services.traefik.loadbalancer.server.port: "8080"
      traefik.http.middlewares.traefik-auth.basicauth.usersfile: /etc/traefik/.htpasswd
      traefik.http.middlewares.traefik-auth.basicauth.removeheader: true
  ###########################################################################
  # postgres database
  ###########################################################################
  postgres:
    image: postgres:16
    # image: pgvector/pgvector:pg16
    hostname: postgres
    container_name: postgres
    restart: unless-stopped
    command: >
      -c ssl=on
      -c ssl_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem
      -c ssl_key_file=/etc/ssl/private/ssl-cert-snakeoil.key
      -c wal_level=logical
      -c max_wal_senders=1
      -c max_replication_slots=1
    #   -c listen_addresses = '*'
    ports:
      - '5432:5432'
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: postgres
    volumes:
      - pg_data:/var/lib/postgresql/data
      - ./infra/base/postgres/initdb.d:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB -q']
      interval: 60s
      start_period: 1m
      start_interval: 10s
      timeout: 15s
      retries: 5
  ###########################################################################
  # hasura service
  ###########################################################################
  graphql:
    image: hasura/graphql-engine:v2.38.1
    hostname: graphql
    container_name: graphql
    restart: unless-stopped
    expose:
      - 8080
    environment:
      HASURA_GRAPHQL_DATABASE_URL: postgres://postgres:${POSTGRES_PASSWORD:-postgres}@postgres:5432/postgres?sslmode=allow
      # HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://postgres:${POSTGRES_PASSWORD:-postgres}@postgres:5432/postgres?sslmode=allow
      HASURA_GRAPHQL_JWT_SECRET: '{ "type": "HS256", "key": "${HASURA_GRAPHQL_JWT_SECRET_KEY}"}'
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_GRAPHQL_ADMIN_SECRET:-nhost-admin-secret}
      HASURA_GRAPHQL_ENABLE_CONSOLE: 'true'
      HASURA_GRAPHQL_LOG_LEVEL: warn
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup
      HASURA_GRAPHQL_UNAUTHORIZED_ROLE: anonymous
      HASURA_GRAPHQL_ENABLE_TELEMETRY: 'false'
      HASURA_GRAPHQL_CORS_DOMAIN: '*'
    healthcheck:
      test: curl --fail -s http://localhost:8080/healthz || exit 1
      interval: 60s
      start_period: 1m
      start_interval: 10s
      timeout: 15s
      retries: 5
    depends_on:
      traefik:
        condition: service_healthy
      postgres:
        condition: service_healthy
    <<: *extra_hosts
    labels:
      traefik.enable: "true"
      traefik.http.middlewares.replace-graphql.replacepathregex.regex: /v1(/|$$)(.*)
      traefik.http.middlewares.replace-graphql.replacepathregex.replacement: /v1/graphql$$2
      traefik.http.routers.graphql.entrypoints: websecure
      traefik.http.routers.graphql.middlewares: replace-graphql
      traefik.http.routers.graphql.rule: PathPrefix(`/v1`) && Host(`graphql${BASE_HOSTNAME}`)
      traefik.http.routers.graphql.service: graphql
      traefik.http.routers.graphql.tls: "true"
      traefik.http.services.graphql.loadbalancer.server.port: "8080"
      traefik.http.routers.hasura.entrypoints: websecure
      traefik.http.routers.hasura.rule: ( PathPrefix(`/v1`) || PathPrefix(`/v2`) || PathPrefix(`/api/`) || PathPrefix(`/console/assets`) ) && Host(`hasura${BASE_HOSTNAME}`)
      traefik.http.routers.hasura.service: hasura
      traefik.http.routers.hasura.tls: "true"
      traefik.http.services.hasura.loadbalancer.server.port: "8080"
  ###########################################################################
  # mailpit
  ###########################################################################
  mailpit:
    image: axllent/mailpit:v1.16.0
    hostname: mailpit
    container_name: mailpit
    restart: unless-stopped
    profiles: [all]
    environment:
      MP_SMTP_AUTH: 'user:password'
      # MP_SMTP_AUTH_ACCEPT_ANY: 1
      MP_SMTP_AUTH_ALLOW_INSECURE: 1
      TZ: ${CONTAINER_TIMEZONE:-America/Los_Angeles}
    expose:
      - 1025 # MP_SMTP_BIND_ADDR
      - 8025 # MP_UI_BIND_ADDR
    volumes:
      - mailpit:/data
    healthcheck:
      test: ["CMD", "wget", "--spider", "-S", "http://localhost:8025/livez"] # for k8 /readyz
      interval: 60s
      start_period: 1m
      start_interval: 10s
      timeout: 15s
      retries: 5
    depends_on:
      traefik:
        condition: service_healthy
    labels:
      traefik.enable: "true"
      traefik.http.routers.mailpit.entrypoints: websecure
      traefik.http.routers.mailpit.rule: Host(`mailpit${BASE_HOSTNAME}`)
      traefik.http.routers.mailpit.service: mailpit
      traefik.http.routers.mailpit.tls: "true"
      traefik.http.services.mailpit.loadbalancer.server.port: "8025"
  ###########################################################################
  # hasura auth
  # Environment Variables:
  # https://github.com/nhost/hasura-auth/blob/main/docs/environment-variables.md
  ###########################################################################
  auth:
    image: nhost/hasura-auth:0.29.1
    hostname: auth
    container_name: auth
    restart: unless-stopped
    volumes:
      - ./nhost/emails:/app/email-templates
    environment:
      AUTH_LOG_LEVEL: info
      AUTH_ACCESS_CONTROL_ALLOWED_EMAIL_DOMAINS: ${AUTH_ACCESS_CONTROL_ALLOWED_EMAIL_DOMAINS:-}
      AUTH_ACCESS_CONTROL_ALLOWED_EMAILS: ${AUTH_ACCESS_CONTROL_ALLOWED_EMAILS:-}
      AUTH_ACCESS_CONTROL_ALLOWED_REDIRECT_URLS: https://console${BASE_HOSTNAME}:5173,https://console${BASE_HOSTNAME},https://*.vercel.app/
      AUTH_ACCESS_CONTROL_BLOCKED_EMAIL_DOMAINS: ${AUTH_ACCESS_CONTROL_BLOCKED_EMAIL_DOMAINS:-}
      AUTH_ACCESS_CONTROL_BLOCKED_EMAILS: ${AUTH_ACCESS_CONTROL_BLOCKED_EMAILS:-}
      AUTH_ACCESS_TOKEN_EXPIRES_IN: "900"
      AUTH_ANONYMOUS_USERS_ENABLED: "false"
      AUTH_API_PREFIX: /v1
      AUTH_CLIENT_URL: ${AUTH_CLIENT_URL:-https://console${BASE_HOSTNAME}:5173}
      AUTH_DISABLE_NEW_USERS: "false"
      AUTH_DISABLE_SIGNUP: "false"
      AUTH_EMAIL_PASSWORDLESS_ENABLED: "true"
      AUTH_SHOW_LOG_QUERY_PARAMS: "false"
      AUTH_EMAIL_SIGNIN_EMAIL_VERIFIED_REQUIRED: "false"
      AUTH_GRAVATAR_DEFAULT: mp
      AUTH_GRAVATAR_ENABLED: "true"
      AUTH_GRAVATAR_RATING: g
      AUTH_HOST: 0.0.0.0
      AUTH_JWT_CUSTOM_CLAIMS: '{"allowed-orgs":"organizations[].organization","default-org":"metadata.org","user-email":"email"}'
      AUTH_LOCALE_ALLOWED_LOCALES: en,de,es
      AUTH_LOCALE_DEFAULT: en
      AUTH_MFA_ENABLED: "true"
      AUTH_MFA_TOTP_ISSUER: ${APP_NAME}
      AUTH_PASSWORD_HIBP_ENABLED: "false"
      AUTH_PASSWORD_MIN_LENGTH: "9"
      AUTH_PORT: "4000"
      AUTH_PROVIDER_AZUREAD_CLIENT_ID: ${AUTH_PROVIDER_AZUREAD_CLIENT_ID}
      AUTH_PROVIDER_AZUREAD_CLIENT_SECRET: ${AUTH_PROVIDER_AZUREAD_CLIENT_SECRET}
      AUTH_PROVIDER_AZUREAD_ENABLED: "true"
      AUTH_PROVIDER_AZUREAD_TENANT: ${AUTH_PROVIDER_AZUREAD_TENANT}
      AUTH_PROVIDER_GITHUB_CLIENT_ID: ${AUTH_PROVIDER_GITHUB_CLIENT_ID}
      AUTH_PROVIDER_GITHUB_CLIENT_SECRET: ${AUTH_PROVIDER_GITHUB_CLIENT_SECRET}
      AUTH_PROVIDER_GITHUB_ENABLED: "true"
      AUTH_PROVIDER_GOOGLE_CLIENT_ID: ${AUTH_PROVIDER_GOOGLE_CLIENT_ID}
      AUTH_PROVIDER_GOOGLE_CLIENT_SECRET: ${AUTH_PROVIDER_GOOGLE_CLIENT_SECRET}
      AUTH_PROVIDER_GOOGLE_ENABLED: "true"
      AUTH_PROVIDER_GOOGLE_SCOPE: ""
      AUTH_REFRESH_TOKEN_EXPIRES_IN: "2592000"
      AUTH_REQUIRE_ELEVATED_CLAIM: required
      AUTH_SERVER_URL: https://auth${BASE_HOSTNAME}/v1
      AUTH_SMTP_AUTH_METHOD: ${AUTH_SMTP_AUTH_METHOD:-PLAIN}
      AUTH_SMTP_HOST: ${AUTH_SMTP_HOST:-mailpit}
      AUTH_SMTP_PORT: ${AUTH_SMTP_PORT:-1025}
      AUTH_SMTP_USER: ${AUTH_SMTP_USER:-user}
      AUTH_SMTP_PASS: ${AUTH_SMTP_PASS:-password}
      AUTH_SMTP_SECURE: ${AUTH_SMTP_SECURE:-false}
      AUTH_SMTP_SENDER: ${AUTH_SMTP_SENDER:-hasura-auth@example.com}
      AUTH_USER_DEFAULT_ALLOWED_ROLES: user,me
      AUTH_USER_DEFAULT_ROLE: user
      AUTH_WEBAUTHN_ATTESTATION_TIMEOUT: "60000"
      AUTH_WEBAUTHN_ENABLED: "true"
      AUTH_WEBAUTHN_RP_ID: ${APP_NAME}
      AUTH_WEBAUTHN_RP_NAME: ${APP_DESCRIPTION}
      AUTH_WEBAUTHN_RP_ORIGINS: ${AUTH_CLIENT_URL:-https://console${BASE_HOSTNAME}:5173,https://console.traefik.me}
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_GRAPHQL_ADMIN_SECRET:-nhost-admin-secret}
      HASURA_GRAPHQL_DATABASE_URL: postgres://postgres:${POSTGRES_PASSWORD:-postgres}@postgres:5432/postgres
      HASURA_GRAPHQL_GRAPHQL_URL: http://graphql:8080/v1/graphql
      HASURA_GRAPHQL_JWT_SECRET: '{ "type": "HS256", "key": "${HASURA_GRAPHQL_JWT_SECRET_KEY}"}'
    expose:
      - 4000
    healthcheck:
      test:
          - CMD
          - wget
          - --spider
          - -S
          - http://localhost:4000/healthz
      interval: 60s
      start_period: 1m
      start_interval: 10s
      timeout: 15s
      retries: 5
    depends_on:
      traefik:
        condition: service_healthy
      # mailpit:
      #   condition: service_healthy
      postgres:
        condition: service_healthy
      graphql:
        condition: service_healthy
    <<: *extra_hosts
    labels:
      traefik.enable: "true"
      traefik.http.routers.auth.entrypoints: websecure
      traefik.http.routers.auth.rule: Host(`auth${BASE_HOSTNAME}`)
      traefik.http.routers.auth.service: auth
      traefik.http.routers.auth.tls: "true"
      traefik.http.services.auth.loadbalancer.server.port: "4000"
  ###########################################################################
  # minio
  ###########################################################################
  minio:
    image: bitnami/minio:2024.4.6
    hostname: minio
    container_name: minio
    restart: unless-stopped
    profiles: [all]
    volumes:
     - minio:/bitnami/minio/data
    environment:
      MINIO_ROOT_USER: ${S3_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${S3_SECRET_KEY}
      MINIO_DEFAULT_BUCKETS: ${MINIO_DEFAULT_BUCKETS:-apps:download,public:public}
    expose:
      - 9000
      - 9001
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 60s
      start_period: 1m
      start_interval: 10s
      timeout: 15s
      retries: 5
    depends_on:
      traefik:
        condition: service_healthy
    labels:
      traefik.enable: "true"
      traefik.http.routers.minio.entrypoints: websecure
      traefik.http.routers.minio.rule: Host(`minio${BASE_HOSTNAME}`)
      traefik.http.routers.minio.service: minio
      traefik.http.routers.minio.tls: "true"
      traefik.http.services.minio.loadbalancer.server.port: "9001"
  ###########################################################################
  # storage
  ###########################################################################
  storage:
    image: nhost/hasura-storage:0.6.0
    hostname: storage
    container_name: storage
    restart: unless-stopped
    profiles: [all]
    command:
      - serve
    expose:
      - 5000
    environment:
      BIND: :5000
      DEBUG: "true"
      # CLAMAV_SERVER: tcp://run-clamav:3310
      HASURA_ENDPOINT: http://graphql:8080/v1
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_GRAPHQL_ADMIN_SECRET:-nhost-admin-secret}
      HASURA_METADATA: "1"
      POSTGRES_MIGRATIONS: "1"
      POSTGRES_MIGRATIONS_SOURCE: postgres://postgres:${POSTGRES_PASSWORD:-postgres}@postgres:5432/postgres?sslmode=disable
      PUBLIC_URL: https://storage${BASE_HOSTNAME}
      S3_ACCESS_KEY: ${S3_ACCESS_KEY}
      S3_BUCKET: ${S3_BUCKET:-public}
      S3_ENDPOINT: ${S3_ENDPOINT:-http://minio:9000}
      S3_REGION: ${S3_REGION:-}
      S3_ROOT_FOLDER: ${S3_ROOT_FOLDER:-}
      S3_SECRET_KEY: ${S3_SECRET_KEY}
    depends_on:
      traefik:
        condition: service_healthy
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
      graphql:
        condition: service_healthy
    # healthcheck:
    #   test: curl --fail -s http://localhost:5000/healthz || exit 1
    #   interval: 60s
    #   start_period: 1m
    #   start_interval: 10s
    #   timeout: 15s
    #   retries: 5
    <<: *extra_hosts
    labels:
      traefik.enable: "true"
      traefik.http.routers.storage.entrypoints: websecure
      traefik.http.routers.storage.rule: PathPrefix(`/v1`) && Host(`storage${BASE_HOSTNAME}`)
      traefik.http.routers.storage.service: storage
      traefik.http.routers.storage.tls: "true"
      traefik.http.services.storage.loadbalancer.server.port: "5000"
  ###########################################################################
  # dashboard
  ###########################################################################
  dashboard:
    image: nhost/dashboard:1.13.2
    hostname: dashboard
    container_name: dashboard
    restart: unless-stopped
    profiles: [all]
    environment:
      NEXT_PUBLIC_ENV: dev
      NEXT_PUBLIC_NHOST_ADMIN_SECRET: ${HASURA_GRAPHQL_ADMIN_SECRET:-nhost-admin-secret}
      NEXT_PUBLIC_NHOST_AUTH_URL: https://auth${BASE_HOSTNAME}/v1
      NEXT_PUBLIC_NHOST_CONFIGSERVER_URL: https://dashboard${BASE_HOSTNAME}/v1/configserver/graphql
      NEXT_PUBLIC_NHOST_FUNCTIONS_URL: https://functions${BASE_HOSTNAME}/v1
      NEXT_PUBLIC_NHOST_GRAPHQL_URL: https://graphql${BASE_HOSTNAME}/v1
      NEXT_PUBLIC_NHOST_HASURA_API_URL: https://hasura${BASE_HOSTNAME}
      NEXT_PUBLIC_NHOST_HASURA_CONSOLE_URL: https://hasura${BASE_HOSTNAME}
      NEXT_PUBLIC_NHOST_HASURA_MIGRATIONS_API_URL: https://hasura${BASE_HOSTNAME}/migrations
      NEXT_PUBLIC_NHOST_PLATFORM: "false"
      NEXT_PUBLIC_NHOST_STORAGE_URL: https://storage${BASE_HOSTNAME}/v1
    expose:
      - 3000
    depends_on:
      traefik:
        condition: service_healthy
      auth:
        condition: service_healthy
    <<: *extra_hosts
    labels:
      traefik.enable: "true"
      traefik.http.routers.dashboard.entrypoints: websecure
      traefik.http.routers.dashboard.rule: Host(`dashboard${BASE_HOSTNAME}`)
      traefik.http.routers.dashboard.service: dashboard
      traefik.http.routers.dashboard.tls: "true"
      traefik.http.routers.dashboard.middlewares: traefik-auth
      traefik.http.services.dashboard.loadbalancer.server.port: "3000"
  ###########################################################################
  # configserver
  ###########################################################################
  configserver:
    image: nhost/cli:1.16.1
    hostname: configserver
    container_name: configserver
    restart: unless-stopped
    profiles: [all]
    command:
      - configserver
      - --enable-playground
      - --debug
    volumes:
      - ./nhost:/tmp/root/nhost
      - .:/tmp/root
    expose:
      - 8088
    # environment:
    #   GIN_MODE: release
    # healthcheck: # this works in k8 but not in compose, because there is no curl in image.
    #   test: curl --fail -s http://localhost:8088/healthz || exit 1
    #   interval: 60s
    #   start_period: 1m
    #   start_interval: 10s
    #   timeout: 15s
    #   retries: 5
    depends_on:
      traefik:
        condition: service_healthy
    labels:
      traefik.enable: "true"
      traefik.http.routers.configserver.entrypoints: websecure
      traefik.http.routers.configserver.rule: Host(`dashboard${BASE_HOSTNAME}`) && PathPrefix(`/v1/configserver`)
      traefik.http.routers.configserver.service: configserver
      traefik.http.routers.configserver.tls: "true"
      traefik.http.services.configserver.loadbalancer.server.port: "8088"
  ###########################################################################
  # graphite - nhost AI
  # NOTE: graphite need postgres with `http` and `pgvector` extentions
  # Ref: https://github.com/pramsey/pgsql-http
  ###########################################################################
  ai:
    image: nhost/graphite:0.5.1
    hostname: ai
    container_name: ai
    restart: unless-stopped
    profiles: [optional]
    command:
      - serve
    expose:
      - 8090
    environment:
      GRAPHITE_BASE_URL: http://ai:8090
      GRAPHITE_WEBHOOK_SECRET: ${GRAPHITE_WEBHOOK_SECRET}
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_GRAPHQL_ADMIN_SECRET:-nhost-admin-secret}
      LICENSE: ""
      NHOST_GRAPHQL_URL: http://graphql:8080/v1/graphql
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OPENAI_ORG: ${APP_NAME}
      POSTGRES_CONNECTION: postgres://postgres:${POSTGRES_PASSWORD:-postgres}@postgres:5432/postgres?sslmode=disable
      SYNCH_PERIOD: 10m
    healthcheck:
      test:
        - CMD
        - graphite
        - healthcheck
      interval: 60s
      start_period: 1m
      start_interval: 10s
      timeout: 15s
      retries: 5
    <<: *extra_hosts
    depends_on:
      traefik:
        condition: service_healthy
      auth:
        condition: service_healthy
      graphql:
        condition: service_healthy
      postgres:
        condition: service_healthy
    labels:
      traefik.enable: "true"
      traefik.http.routers.ai.entrypoints: websecure
      traefik.http.routers.ai.rule: Host(`ai${BASE_HOSTNAME}`)
      traefik.http.routers.ai.service: ai
      traefik.http.routers.ai.tls: "true"
      traefik.http.services.ai.loadbalancer.server.port: "8090"
  ###########################################################################
  # tailcall gateway
  ###########################################################################
  gateway:
    image: ghcr.io/tailcallhq/tailcall/tc-server:v0.68.1
    hostname: gateway
    container_name: gateway
    restart: unless-stopped
    profiles: [optional]
    expose:
      - 8080
      - 8081
    environment:
      TAILCALL_LOG_LEVEL: error
    volumes:
      - ./infra/base/tailcall/jsonplaceholder.graphql:/jsonplaceholder.graphql
    tmpfs:
      - /app/.mesh:exec,mode=777
    labels:
      traefik.enable: "true"
      traefik.http.routers.gateway.entrypoints: websecure
      traefik.http.routers.gateway.rule: Host(`gateway${BASE_HOSTNAME}`)
      traefik.http.routers.gateway.service: gateway
      traefik.http.routers.gateway.tls: "true"
      traefik.http.services.gateway.loadbalancer.server.port: "8080"
  ###########################################################################
  # webapp - console
  ###########################################################################
  webapp:
    image: ghcr.io/xmlking/spectacular/console:v0.1.3
    hostname: webapp
    container_name: webapp
    restart: unless-stopped
    profiles: [optional]
    environment:
      NODE_ENV: production
      CACHE_TTL: ${CACHE_TTL:-6000}
      PUBLIC_DEFAULT_ORGANIZATION: ${PUBLIC_DEFAULT_ORGANIZATION:-chinthagunta}
      PUBLIC_BASE_URL: ${PUBLIC_BASE_URL:-https://console.traefik.me}
      PUBLIC_GRAPHQL_ENDPOINT: ${PUBLIC_GRAPHQL_ENDPOINT:-https://graphql${BASE_HOSTNAME}/v1/graphql}
      # PUBLIC_GRAPHQL_ENDPOINT: ${PUBLIC_GRAPHQL_ENDPOINT:-https://hasura${BASE_HOSTNAME}/v1/graphql}
      PUBLIC_TERMS_PRIVACY_COMPANY: 'Your Company'
      PUBLIC_TERMS_PRIVACY_EFFECTIVE_DATE: 'January 1, 2024'
      PUBLIC_TERMS_PRIVACY_WEBSITE: 'yourdomain.com'
      PUBLIC_TERMS_PRIVACY_CONTACT_EMAIL: 'yourname@email.com'
      PUBLIC_TERMS_PRIVACY_APP_NAME: ${APP_NAME}
      PUBLIC_TERMS_PRIVACY_APP_PRICING_AND_SUBSCRIPTIONS: '[Details about the pricing, subscription model, refund policy]'
      PUBLIC_TERMS_PRIVACY_COUNTRY: 'United States'
      HASURA_GRAPHQL_JWT_SECRET_KEY: ${HASURA_GRAPHQL_JWT_SECRET_KEY}
      RATE_LIMIT_SECRET: ${RATE_LIMIT_SECRET}
      FEATURE_ENABLE_PASSWORD_LOGIN: ${FEATURE_ENABLE_PASSWORD_LOGIN}
      FEATURE_ENABLE_AZURE_LOGIN: ${FEATURE_ENABLE_AZURE_LOGIN}
      NHOST_HASURA_URL: https://hasura${BASE_HOSTNAME}/console
      NHOST_AUTH_URL: https://auth${BASE_HOSTNAME}/v1
      NHOST_GRAPHQL_URL: https://graphql${BASE_HOSTNAME}/v1
      NHOST_STORAGE_URL: https://storage${BASE_HOSTNAME}/v1
      NHOST_FUNCTIONS_URL: https://functions${BASE_HOSTNAME}/v1
    expose:
      - 3000
    depends_on:
      traefik:
        condition: service_healthy
      graphql:
        condition: service_healthy
      auth:
        condition: service_healthy
    <<: *extra_hosts
    labels:
      traefik.enable: "true"
      traefik.http.routers.webapp.entrypoints: websecure
      traefik.http.routers.webapp.rule: Host(`console${BASE_HOSTNAME}`)
      traefik.http.routers.webapp.service: webapp
      traefik.http.routers.webapp.tls: "true"
      traefik.http.services.webapp.loadbalancer.server.port: "3000"
  ###########################################################################
  # update-certs-helper job
  # Only start once 60 days to refresh certs
  ###########################################################################
  update-certs-helper:
    image: alpine
    hostname: update-certs-helper
    container_name: update-certs-helper
    profiles: [donotstart]
    command: sh -c "cd /etc/ssl/traefik
      && wget traefik.me/fullchain.pem -O traefik.me.crt
      && wget traefik.me/privkey.pem -O traefik.me.key"
    volumes:
      - certs:/etc/ssl/traefik

###########################################################################
# volumes
###########################################################################
volumes:
  certs: {}
  pg_data: {}
  mailpit: {}
  minio: {}
