"""
The `@server` directive, when applied at the schema level, offers a comprehensive set of server configurations. It dictates how the server behaves and helps tune tailcall for various use-cases.
"""
directive @server(
  """
  `apolloTracing` exposes GraphQL query performance data, including execution time of queries and individual resolvers.
  """
  apolloTracing: Boolean

  """
  `cacheControlHeader` sends `Cache-Control` headers in responses when activated. The `max-age` value is the least of the values received from upstream services. @default `false`.
  """
  cacheControlHeader: Boolean

  """
  `graphiql` activates the GraphiQL IDE at the root path within Tailcall, a tool for query development and testing. @default `false`.
  """
  graphiql: Boolean

  """
  `introspection` allows clients to fetch schema information directly, aiding tools and applications in understanding available types, fields, and operations. @default `true`.
  """
  introspection: Boolean

  """
  `queryValidation` checks incoming GraphQL queries against the schema, preventing errors from invalid queries. Can be disabled for performance. @default `false`.
  """
  queryValidation: Boolean

  """
  `responseValidation` Tailcall automatically validates responses from upstream services using inferred schema. @default `false`.
  """
  responseValidation: Boolean

  """
  `batchRequests` combines multiple requests into one, improving performance but potentially introducing latency and complicating debugging. Use judiciously. @default `false`
  """
  batchRequests: Boolean

  """
  `globalResponseTimeout` sets the maximum query duration before termination, acting as a safeguard against long-running queries.
  """
  globalResponseTimeout: Int

  """
  `workers` sets the number of worker threads. @default the number of system cores.
  """
  workers: Int

  """
  `port` sets the Tailcall running port. @default `8000`.
  """
  port: Int

  """
  This configuration defines local variables for server operations. Useful for storing constant configurations, secrets, or shared information.
  """
  vars: [KeyValue]

  """
  `responseHeaders` appends headers to all server responses, aiding cross-origin requests or extra headers for downstream services.

  The responseHeader is a key-value pair array. These headers are included in every server response. Useful for headers like Access-Control-Allow-Origin for cross-origin requests, or additional headers like X-Allowed-Roles for downstream services.
  """
  responseHeaders: [KeyValue]

  """
  `hostname` sets the server hostname.
  """
  hostname: String

  """
  `version` sets the HTTP version for the server. Options are `HTTP1` and `HTTP2`. @default `HTTP1`.
  """
  version: HttpVersion

  """
  `cert` sets the path to certificate(s) for running the server over HTTP2 (HTTPS). @default `null`.
  """
  cert: String

  """
  `key` sets the path to key for running the server over HTTP2 (HTTPS). @default `null`.
  """
  key: String
) on SCHEMA

enum HttpVersion {
  HTTP1
  HTTP2
}

"""
The `upstream` directive allows you to control various aspects of the upstream server connection. This includes settings like connection timeouts, keep-alive intervals, and more. If not specified, default values are used.
"""
directive @upstream(
  """
  `allowedHeaders` defines the HTTP headers allowed to be forwarded to upstream services. If not set, no headers are forwarded, enhancing security but possibly limiting data flow.
  """
  allowedHeaders: [String]
  """
  The time in seconds that the connection will wait for a response before timing out.
  """
  connectTimeout: Int
  """
  The time in seconds between each keep-alive message sent to maintain the connection.
  """
  keepAliveInterval: Int

  """
  The time in seconds that the connection will wait for a keep-alive message before closing.
  """
  keepAliveTimeout: Int

  """
  A boolean value that determines whether keep-alive messages should be sent while the connection is idle.
  """
  keepAliveWhileIdle: Boolean

  """
  The time in seconds that the connection pool will wait before closing idle connections.
  """
  poolIdleTimeout: Int

  """
  The maximum number of idle connections that will be maintained per host.
  """
  poolMaxIdlePerHost: Int

  """
  The `proxy` setting defines an intermediary server through which the upstream requests will be routed before reaching their intended endpoint. By specifying a proxy URL, you introduce an additional layer, enabling custom routing and security policies.
  """
  proxy: Proxy

  """
  The time in seconds between each TCP keep-alive message sent to maintain the connection.
  """
  tcpKeepAlive: Int
  """
  The maximum time in seconds that the connection will wait for a response.
  """
  timeout: Int
  """
  The User-Agent header value to be used in HTTP requests. @default `Tailcall/1.0`
  """
  userAgent: String
  """
  This refers to the default base URL for your APIs. If it's not explicitly mentioned in the `@upstream` operator, then each [@http](#http) operator must specify its own `baseURL`. If neither `@upstream` nor [@http](#http) provides a `baseURL`, it results in a compilation error.
  """
  baseURL: String
  """
  Activating this enables Tailcall's HTTP caching, adhering to the [HTTP Caching RFC](https://tools.ietf.org/html/rfc7234), to enhance performance by minimizing redundant data fetches. Defaults to `false` if unspecified.
  """
  httpCache: Boolean
  """
  An object that specifies the batch settings, including `maxSize` (the maximum size of the batch), `delay` (the delay in milliseconds between each batch), and `headers` (an array of HTTP headers to be included in the batch).
  """
  batch: Batch
) on SCHEMA

"""
@http
The @http operator indicates that a field or node is backed by a REST API.

For instance, if you add the @http operator to the `users` field of the Query type with a path argument of `"/users"`, it signifies that the `users` field is backed by a REST API.
The path argument specifies the path of the REST API.
In this scenario, the GraphQL server will make a GET request to the API endpoint specified when the `users` field is queried.
"""
directive @http(
  """
  This refers to the API endpoint you're going to call. For instance https://jsonplaceholder.typicode.com/users`.

  For dynamic segments in your API endpoint, use Mustache templates for variable substitution. For instance, to fetch a specific user, use `/users/{{args.id}}`.
  """
  path: String!

  """
  This refers to the HTTP method of the API call. Commonly used methods include `GET`, `POST`, `PUT`, `DELETE` etc. @default `GET`.
  """
  method: Method = GET

  """
  This represents the query parameters of your API call. You can pass it as a static object or use Mustache template for dynamic parameters. These parameters will be added to the URL.
  """
  query: [KeyValue]

  """
  The body of the API call. It's used for methods like POST or PUT that send data to the server. You can pass it as a static object or use a Mustache template to substitute variables from the GraphQL variables.
  """
  body: String

  """
  This refers to the base URL of the API. If not specified, the default base URL is the one specified in the `@upstream` operator
  """
  baseURL: String

  """
  The `headers` parameter allows you to customize the headers of the HTTP request made by the `@http` operator. It is used by specifying a key-value map of header names and their values.
  """
  headers: [KeyValue]

  """
  The `groupBy` parameter groups multiple data requests into a single call. For more details please refer out [n + 1 guide](https://tailcall.run/docs/guides/n+1#solving-using-batching).
  """
  groupBy: [String!]
) on FIELD_DEFINITION

"""
@grpc
The @grpc operator indicates that a field or node is backed by a gRPC API.

For instance, if you add the @grpc operator to the `users` field of the Query type with a service argument of `NewsService` and method argument of `GetAllNews`, it signifies that the `users` field is backed by a gRPC API.
The `service` argument specifies the name of the gRPC service.
The `method` argument specifies the name of the gRPC method.
In this scenario, the GraphQL server will make a gRPC request to the gRPC endpoint specified when the `users` field is queried.
"""
directive @grpc(
  """
  This refers to the gRPC service you're going to call. For instance `NewsService`.
  """
  service: String!
  """
  This refers to the gRPC method you're going to call. For instance `GetAllNews`.
  """
  method: String!
  """
  This refers to the arguments of your gRPC call. You can pass it as a static object or use Mustache template for dynamic parameters. These parameters will be added in the body in `protobuf` format.
  """
  body: String
  """
  This refers to the base URL of the API. If not specified, the default base URL is the one specified in the `@upstream` operator
  """
  baseURL: String
  """
  The `headers` parameter allows you to customize the headers of the HTTP request made by the `@grpc` operator. It is used by specifying a key-value map of header names and their values. Note: content-type is automatically set to application/grpc.
  """
  headers: [KeyValue]
  """
  The `protoPath` parameter allows you to specify the path to the proto file which contains service and method definitions and is used to encode and decode the request and response body.
  """
  protoPath: String
  """
  The key path in the response which should be used to group multiple requests. For instance `["news","id"]`. For more details please refer out [n + 1 guide](https://tailcall.run/docs/guides/n+1#solving-using-batching).
  """
  groupBy: [String!]
) on FIELD_DEFINITION
"""
The @addField operator simplifies data structures and queries by adding a field that inlines or flattens a nested field or node within your schema. more info [here](https://tailcall.run/docs/guides/operators/#addfield)
"""
directive @addField(name: String, path: [String]!) repeatable on OBJECT
"""
The `@modify` operator in GraphQL allows you to change field or node attributes in your schema. more info [here](https://tailcall.run/docs/guides/operators/#modify)
"""
directive @modify(omit: Boolean, name: String) on FIELD_DEFINITION

"""
The `groupBy` parameter groups multiple data requests into a single call. For more details please refer out [n + 1 guide](https://tailcall.run/docs/guides/n+1#solving-using-batching).
"""
directive @groupBy(path: [String!]) on FIELD_DEFINITION
"""
The `@const` operators allows us to embed a constant response for the schema.
"""
directive @const(data: JSON) on FIELD_DEFINITION

"""
The @graphQL operator allows to specify GraphQL API server request to fetch data from.
"""
directive @graphQL(
  """
  This refers to the base URL of the API. If not specified, the default base URL is the one specified in the `@upstream` operator.
  """
  baseURL: String
  """
  Specifies the root field on the upstream to request data from. This maps a field in your schema to a field in the upstream schema. When a query is received for this field, Tailcall requests data from the corresponding upstream field.
  """
  name: String
  """
  Named arguments for the requested field. More info [here](https://tailcall.run/docs/guides/operators/#args)
  """
  args: [KeyValue]
  """
  The headers parameter allows you to customize the headers of the GraphQL request made by the `@graphQL` operator. It is used by specifying a key-value map of header names and their values.
  """
  headers: [KeyValue]
  """
  If the upstream GraphQL server supports request batching, you can specify the 'batch' argument to batch several requests into a single batch request.

  Make sure you have also specified batch settings to the `@upstream` and to the `@graphQL` operator.
  """
  batch: Boolean
) on FIELD_DEFINITION

"""
The @cache operator enables caching for the query, field or type it is applied to.
"""
directive @cache(
  """
  Specifies the duration, in milliseconds, of how long the value has to be stored in the cache.
  """
  maxAge: Int!
) on FIELD_DEFINITION

enum Method {
  GET
  POST
  PUT
  DELETE
  PATCH
  HEAD
  OPTIONS
}

input Proxy {
  url: String
}

input KeyValue {
  key: String!
  value: String!
}

input Batch {
  maxSize: Int
  delay: Int
  headers: [String]
}

scalar JSON
