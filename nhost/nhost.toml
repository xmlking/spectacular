[global]
[[global.environment]]
name = 'EVENTS_BASE_URL'
value = 'http://localhost:5173/api/events'

[[global.environment]]
name = 'ACTION_BASE_URL'
value = 'http://localhost:5173/api/actions'

[postgres]
version = '14.6-20231218-1'

[postgres.settings]
maxConnections = 100
walLevel = 'logical'
maxWalSenders = 1
maxReplicationSlots = 1

[hasura]
version = 'v2.33.4-ce'
adminSecret = '{{ secrets.HASURA_GRAPHQL_ADMIN_SECRET }}'
webhookSecret = '{{ secrets.NHOST_WEBHOOK_SECRET }}'

[[hasura.jwtSecrets]]
type = 'HS256'
key = '{{ secrets.HASURA_GRAPHQL_JWT_SECRET_KEY }}'

# # hasura-auth not ready for claims_map
# [[hasura.jwtSecrets.claims_map]]
# claim = "x-hasura-allowed-roles"
# path = "$.roles"
# [[hasura.jwtSecrets.claims_map]]
# claim = "x-hasura-default-role"
# value = "user"
# [[hasura.jwtSecrets.claims_map]]
# claim = "x-hasura-user-id"
# path = "$.email"
# [[hasura.jwtSecrets.claims_map]]
# claim = "x-hasura-org-id"
# path = "$.org"
# default = "public"
# [[hasura.jwtSecrets.claims_map]]
# claim = "x-other-claim"
# path = "$.user.claim.id"
# default = "default-value"

[hasura.settings]
corsDomain = ['*']
devMode = true
enableAllowList = false
enableConsole = true
enableRemoteSchemaPermissions = false
enabledAPIs = ['metadata', 'graphql', 'pgdump', 'config']

[hasura.logs]
level = 'warn'

[hasura.events]
httpPoolSize = 100

[functions]
[functions.node]
version = 18

[auth]
version = '0.24.0'

[auth.redirections]
clientUrl = '{{ secrets.CLIENT_URL }}'
allowedUrls = ['http://localhost:5173', 'https://*.vercel.app/']

[auth.signUp]
enabled = true
# disableNewUsers = true

[auth.user]
[auth.user.roles]
default = 'user'
allowed = ['user', 'me', 'manager', 'supervisor', 'engine']

[auth.user.locale]
default = 'en'
allowed = ['en']

[auth.user.gravatar]
enabled = true
default = 'mp'
rating = 'g'

[auth.user.email]

[auth.user.emailDomains]

[auth.session]
[auth.session.accessToken]
expiresIn = 900

[[auth.session.accessToken.customClaims]]
key = 'orgs'
value = 'organizations[].organization'
[[auth.session.accessToken.customClaims]]
key = 'default-org'
value = 'metadata.org'
[[auth.session.accessToken.customClaims]]
key = 'user-email'
value = 'email'

[auth.session.refreshToken]
expiresIn = 43200

[auth.method]
[auth.method.anonymous]
enabled = false

[auth.method.emailPasswordless]
enabled = true

[auth.method.emailPassword]
hibpEnabled = false
emailVerificationRequired = false
passwordMinLength = 9

[auth.method.smsPasswordless]
enabled = false

[auth.method.oauth]
[auth.method.oauth.apple]
enabled = false

[auth.method.oauth.azuread]
enabled = true
tenant = '{{ secrets.AUTH_PROVIDER_AZUREAD_TENANT }}'
clientId = '{{ secrets.AUTH_PROVIDER_AZUREAD_CLIENT_ID }}'
clientSecret = '{{ secrets.AUTH_PROVIDER_AZUREAD_CLIENT_SECRET }}'

[auth.method.oauth.bitbucket]
enabled = false

[auth.method.oauth.discord]
enabled = false

[auth.method.oauth.facebook]
enabled = false

[auth.method.oauth.github]
enabled = true
clientId = '{{ secrets.AUTH_PROVIDER_GITHUB_CLIENT_ID }}'
clientSecret = '{{ secrets.AUTH_PROVIDER_GITHUB_CLIENT_SECRET }}'

[auth.method.oauth.gitlab]
enabled = false

[auth.method.oauth.google]
enabled = true
clientId = '{{ secrets.AUTH_PROVIDER_GOOGLE_CLIENT_ID }}'
clientSecret = '{{ secrets.AUTH_PROVIDER_GOOGLE_CLIENT_SECRET }}'

[auth.method.oauth.linkedin]
enabled = false

[auth.method.oauth.spotify]
enabled = false

[auth.method.oauth.strava]
enabled = false

[auth.method.oauth.twitch]
enabled = false

[auth.method.oauth.twitter]
enabled = false

[auth.method.oauth.windowslive]
enabled = false

[auth.method.oauth.workos]
enabled = false

[auth.method.webauthn]
enabled = true

[auth.method.webauthn.relyingParty]
name = 'Spectacular Console App'
id = 'Spectacular'
# origins = ['http://localhost:5173']

[auth.method.webauthn.attestation]
timeout = 60000

[auth.totp]
enabled = true
issuer = 'Spectacular'

[provider]
[provider.smtp]
host = '{{ secrets.AUTH_SMTP_HOST }}'
port = 587
user = '{{ secrets.AUTH_SMTP_USER }}'
password = '{{ secrets.AUTH_SMTP_PASS }}'
sender = '{{ secrets.AUTH_SMTP_SENDER }}'
secure = false
method = 'LOGIN'

[storage]
version = '0.5.1'

[storage.antivirus]
server = 'tcp://run-clamav:3310'

[ai]
version = '0.3.2'
# Used to validate requests between postgres and the AI service.
# The AI service will also include the header X-Graphite-Webhook-Secret
# with this value set when calling external webhooks so the source of
# the request can be validated.
webhookSecret = '{{ secrets.GRAPHITE_WEBHOOK_SECRET }}'

[ai.resources]
[ai.resources.compute]
# Dedicated resources allocated for the service
cpu = 128
memory = 256

[ai.autoEmbeddings]
# How often to run the job that keeps embeddings up to date
synchPeriodMinutes = 5

[ai.openai]
# Key to use for authenticating API requests to OpenAI.
apiKey = '{{ secrets.OPENAI_API_KEY }}'
# OpenAI organization to use.
organization = 'my-org'



[observability]
[observability.grafana]
adminPassword = '{{ secrets.GRAFANA_ADMIN_PASSWORD }}'
