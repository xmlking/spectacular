###
@graphqlEndpoint =  {{$dotenv HASURA_GRAPHQL_ENDPOINT}}/v1/graphql
@graphqlAdminToken = {{$dotenv HASURA_GRAPHQL_ADMIN_SECRET}}
# set token without `''`
@graphqlUserToken =
###

### IntrospectionQuery
# @name IntrospectionQuery
POST  {{graphqlEndpoint}}
X-REQUEST-TYPE: GraphQL
Content-Type: application/json
x-hasura-admin-secret: {{graphqlAdminToken}}

query IntrospectionQuery {
	__schema {
		types {
			name
			description
		}
		directives {
			name
			description
			locations
		}
	}
}

### List Active Rules
# @name listRules
POST  {{graphqlEndpoint}}
X-REQUEST-TYPE: GraphQL
Content-Type: application/json
Authorization: Bearer {{graphqlUserToken}}
x-hasura-admin-secret: {{graphqlAdminToken}}
x-hasura-allowed-roles:  user manager
x-hasura-role: manager
x-hasura-org-id: chinthagunta
x-hasura-user-id: xmlking@gmail.com

query ListRules($limit: Int = 50, $offset: Int = 0, $order_by: [rules_order_by!] = [{updatedAt: desc_nulls_last}]) {
  rules(limit: $limit, offset: $offset, order_by: $order_by) {
    tags
    createdBy
    description
    displayName
    organization
    updatedBy
    createdAt
    updatedAt
    annotations
    shared
    id
    action
    appId
	throttleRate
    destination
    destinationPort
    direction
    protocol
    source
    sourcePort
    weight
  }
}

{
  "limit": 5,
  "offset": 0
}

### Search Active and Shared Rules
# @name searchSharedRules
POST  {{graphqlEndpoint}}
X-REQUEST-TYPE: GraphQL
Content-Type: application/json
Authorization: Bearer {{graphqlUserToken}}
x-hasura-admin-secret: {{graphqlAdminToken}}
x-hasura-allowed-roles:  user manager
x-hasura-role: manager
x-hasura-org-id: chinthagunta
x-hasura-user-id: xmlking@gmail.com

query SearchSharedRules($filter: String!, $limit: Int = 50, $offset: Int = 0, $orderBy: [rules_order_by!] = [{updatedAt: desc_nulls_last}]) {
  rules(order_by: $orderBy, limit: $limit, offset: $offset, where: {displayName: {_like: $filter}, shared: {_eq: true}}) {
    action
    annotations
    appId
	throttleRate
    createdAt
    createdBy
    description
    destination
    destinationPort
    direction
    displayName
    id
    organization
    protocol
    shared
    source
    sourcePort
    tags
    updatedAt
    updatedBy
    weight
  }
}


{
  "filter": "%block%",
  "limit": 2
}

###
@firstRuleId =  {{listRules.response.body.$.data.rules[0].id}}
###

### getRule by Id
# @name getRule
POST  {{graphqlEndpoint}}
X-REQUEST-TYPE: GraphQL
Content-Type: application/json
Authorization: Bearer {{graphqlUserToken}}
x-hasura-admin-secret: {{graphqlAdminToken}}
x-hasura-allowed-roles:  user manager
x-hasura-role: manager
x-hasura-org-id: chinthagunta
x-hasura-user-id: xmlking@gmail.com

query GetRule($id: uuid!) {
  rules_by_pk(id: $id) {
    action
    annotations
    appId
	throttleRate
    createdAt
    createdBy
    description
    destination
    destinationPort
    direction
    displayName
    id
    organization
    protocol
    shared
    source
    sourcePort
    tags
    updatedAt
    updatedBy
    weight
  }
}

{
  "id": "{{firstRuleId}}"
}

### Create Rule
# organization = x-hasura-org-id
# createdBy = x-hasura-user-id
# @name createRule
POST  {{graphqlEndpoint}}
X-REQUEST-TYPE: GraphQL
Content-Type: application/json
Authorization: Bearer {{graphqlUserToken}}
x-hasura-admin-secret: {{graphqlAdminToken}}
x-hasura-allowed-roles:  user manager
x-hasura-role: manager
x-hasura-org-id: chinthagunta
x-hasura-user-id: xmlking@gmail.com

mutation CreateRule($data: rules_insert_input!) {
  insert_rules_one(object: $data) {
    action
    annotations
    appId
	throttleRate
    createdAt
    createdBy
    description
    destination
    destinationPort
    direction
    displayName
    id
    organization
    protocol
    shared
    source
    sourcePort
    tags
    updatedAt
    updatedBy
    weight
  }
}

{
  "data": {
    "displayName": "youtube_blocker_2",
    "description":"Block Youtube from work IP",
    "tags":["tz","us"],
    "annotations":"sumo=>demo",
	"destination": "199.223.232.0",
	"destinationPort": "443",
	"source": "127.0.0.1",
	"sourcePort": "*",
	"direction": "egress",
	"action": "block",
	"protocol": "ICMPV6",
	"shared": true,
    "weight": 555
  }
}



###
@createdRuleId =  {{createRule.response.body.$.data.insert_rules_one.id}}
###

### Update Rule
# organization = x-hasura-org-id
# createdBy = x-hasura-user-id
# @name updatePool
POST  {{graphqlEndpoint}}
X-REQUEST-TYPE: GraphQL
Content-Type: application/json
Authorization: Bearer {{graphqlUserToken}}
x-hasura-admin-secret: {{graphqlAdminToken}}
x-hasura-allowed-roles:  user manager
x-hasura-role: manager
x-hasura-org-id: chinthagunta
x-hasura-user-id: xmlking@gmail.com

mutation UpdateRule($id: uuid!, $data: rules_set_input!) {
  update_rules_by_pk(pk_columns: {id: $id}, _set: $data) {
    action
    annotations
    appId
	throttleRate
    createdAt
    createdBy
    description
    destination
    destinationPort
    direction
    displayName
    id
    organization
    protocol
    shared
    source
    sourcePort
    tags
    updatedAt
    updatedBy
    weight
  }
}

{
  "id":"{{createdRuleId}}",
  "data": {
	"description":"Block Youtube from work IP v2",
    "tags":["tz","us"],
    "annotations":"sumo2=>demo2"
  }
}

### Delete Rule
# if null returned, either ID is not found or this user don't have permissions to delete
# @name deleteRule
POST  {{graphqlEndpoint}}
X-REQUEST-TYPE: GraphQL
Content-Type: application/json
Authorization: Bearer {{graphqlUserToken}}
x-hasura-admin-secret: {{graphqlAdminToken}}
x-hasura-allowed-roles:  user manager
x-hasura-role: manager
x-hasura-org-id: chinthagunta
x-hasura-user-id: xmlking@gmail.com

mutation DeleteRule($id: uuid!, $deletedAt: timestamptz!) {
	update_rules_by_pk(pk_columns: { id: $id }, _set: { deletedAt: $deletedAt }) {
		displayName
	}
}

{
  "id": "{{createdRuleId}}",
  "deletedAt": "{{$localDatetime iso8601}}"
}
