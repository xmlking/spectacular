<script lang="ts">
import { invalidateAll } from '$app/navigation';
import type { PersonalAccessTokensFragment } from '$houdini';
import { DeletePATStore, fragment, graphql } from '$houdini';
import { handleMessage } from '$lib/components/layout/toast-manager';
import { popup } from '@skeletonlabs/skeleton';
import { getToastStore } from '@skeletonlabs/skeleton';
import * as Table from '@spectacular/skeleton/components/table';
import { DataHandler } from '@vincjo/datatables';
import { formatDistance } from 'date-fns';
import { Trash2 } from 'lucide-svelte';

export let user: PersonalAccessTokensFragment;
$: data = fragment(
  user,
  graphql(`
      fragment PersonalAccessTokensFragment on users {
        personalAccessTokens: refreshTokens(order_by: { expiresAt: asc }) @list(name: "Personal_Access_Tokens") @loading(cascade: true) {
          id
          name: metadata(path: "name")
          type
          expiresAt
          createdAt
          userId
        }
      }
    `),
);

$: ({ personalAccessTokens } = $data);
//variables
const toastStore = getToastStore();
const handler = new DataHandler(personalAccessTokens, { rowsPerPage: 5 });
const rows = handler.getRows();

// Functions
// PAT delete function
let isDeleting = false;
const deletePersonalAccessToken = graphql(`
    mutation DeletePersonalAccessToken($id: uuid!) {
      deleteAuthRefreshToken(id: $id) {
        ...Personal_Access_Tokens_remove @allLists
      }
    }
  `);
async function del(patId: string) {
  const { errors, data } = await DeletePAT.mutate({ patId });
  if (errors) {
    console.log(errors.toString());
  }
  if (data?.deleteAuthRefreshToken?.id) {
    handleMessage(
      {
        message: `<p class="text-xl">Token: <span class="text-red-500 font-bold">${data?.deleteAuthRefreshToken?.metadata}</span> deleted</p>`,
        type: 'success',
      },
      toastStore,
    );
    await invalidateAll();
  }
}
</script>

<div class="card p-4">
  <div class="page-container p-0">
    <header class="flex justify-between">
      <Table.Search {handler} />
      <h2 class="variant-ghost-primary btn w-42">PAT Tokens</h2>
      <Table.RowsPerPage {handler} />
    </header>
    <table class="table table-hover table-compact w-full table-auto">
      <thead>
        <tr>
          <Table.Head {handler} orderBy="id">ID</Table.Head>
          <Table.Head {handler} orderBy="metadata.name">Name</Table.Head>
          <Table.Head {handler} orderBy="expiresAt">Expires At</Table.Head>
          <Table.Head {handler} orderBy="id">Delete</Table.Head>
        </tr>
        <tr>
          <Table.HeadFilter {handler} filterBy="id" />
          <Table.HeadFilter {handler} filterBy="metadata.name" />
          <Table.HeadFilter {handler} filterBy="expiresAt" />
          <Table.HeadFilter {handler} filterBy="id" />
        </tr>
      </thead>
      <tbody>
        {#each $rows as tokens}
          <tr>
            <td>{tokens.id}</td>
            <td>
              {#if tokens.name}
                {tokens.name}
              {:else}
                <span class="text-red-500">No name</span>
              {/if}
            </td>
            <td
              >{formatDistance(new Date(tokens.expiresAt), new Date())} to go</td
            >
            <td>
              <div
                use:popup={{
                  event: "click",
                  target: "delete" + tokens.id,
                  placement: "left",
                }}
              >
                <Trash2 class="text-red-500" />
              </div>
            </td>
          </tr>
          <div
            class="card border-primary-400 p-4"
            data-popup="delete{tokens.id}"
          >
            <h3 class="h3">Alert</h3>
            <pre class="text-l left">
Are you sure you want to delete
Token <span class="text-red-500">{tokens.name}</span>?
            </pre>
            <button
              type="button"
              class="variant-filled-error btn"
              on:click={() => {
                del(tokens.id);
              }}>Delete</button
            >
            <button type="button" class="variant-filled-error btn"
              >Cancel</button
            >
          </div>
        {/each}
      </tbody>
    </table>
    <footer class="flex justify-between">
      <Table.RowCount {handler} />
      <Table.Pagination {handler} />
    </footer>
  </div>
</div>

<pre> {JSON.stringify(personalAccessTokens, null, 2)}</pre>
