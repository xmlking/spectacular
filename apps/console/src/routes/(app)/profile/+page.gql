# CacheOrNetwork is default cache strategy.
# We are leveraging Houdini's Optimistic updates for this usecase
query GetUser($userId: uuid!) @cache(policy: CacheOrNetwork) {
  # get all fragments needed for profile page.
  user(id: $userId) @loading(cascade: true) {
    id
    displayName
    email
    phoneNumber
    defaultOrg
    defaultRole
    avatarUrl
    locale
    plan: metadata(path: ".plan")
    userOrgRoles(order_by: {organization: asc}) {
      organization
      role
      isDefaultRole
    }
    securityKeys(order_by: { nickname: asc })  @list(name: "Security_Keys") {
      __typename
      ...SecurityKeyFragment
    }
    personalAccessTokens: refreshTokens {
      id
      metadata(path: ".name")
    }
    userProviders {
      id
      providerId
      providerUserId
      updatedAt
    }
  }
}
