schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """refresh the cache entry"""
  refresh: Boolean! = false

  """measured in seconds"""
  ttl: Int! = 60
) on QUERY

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

input ListUniversitiesInput {
  country: String
  name: String
}

type ListUniversitiesOutput {
  alpha_two_code: String
  country: String
  domains: [String!]!
  name: String
  stateprovince: String
  web_pages: [String!]!
}

input SearchRestroomsInput {
  city: String
  limit: Int
  offset: Int
  page: Int
}

type SearchRestroomsOutput {
  accessible: Boolean
  approved: Boolean
  changing_table: Boolean
  city: String
  comment: String
  country: String
  created_at: String
  directions: String
  downvote: Int
  edit_id: Int
  id: Int
  latitude: Float
  longitude: Float
  name: String
  state: String
  street: String
  unisex: Boolean
  updated_at: String
  upvote: Int
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_array_comparison_exp {
  """is the array contained in the given array value"""
  _contained_in: [String!]

  """does the array contain the given value"""
  _contains: [String!]
  _eq: [String!]
  _gt: [String!]
  _gte: [String!]
  _in: [[String!]!]
  _is_null: Boolean
  _lt: [String!]
  _lte: [String!]
  _neq: [String!]
  _nin: [[String!]!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

"""policy action enum"""
type action {
  description: String!
  value: String!
}

"""
Boolean expression to filter rows from the table "action". All fields are combined with a logical 'AND'.
"""
input action_bool_exp {
  _and: [action_bool_exp!]
  _not: action_bool_exp
  _or: [action_bool_exp!]
  description: String_comparison_exp
  value: String_comparison_exp
}

enum action_enum {
  """BLOCK"""
  block

  """CALLOUT_INSPECTION"""
  callout_inspection

  """CALLOUT_TERMINATING"""
  callout_terminating

  """CALLOUT_UNKNOWN"""
  callout_unknown

  """PERMIT"""
  permit
}

"""
Boolean expression to compare columns of type "action_enum". All fields are combined with logical 'AND'.
"""
input action_enum_comparison_exp {
  _eq: action_enum
  _in: [action_enum!]
  _is_null: Boolean
  _neq: action_enum
  _nin: [action_enum!]
}

"""Ordering options when selecting data from "action"."""
input action_order_by {
  description: order_by
  value: order_by
}

"""
select columns of table "action"
"""
enum action_select_column {
  """column name"""
  description

  """column name"""
  value
}

"""
Streaming cursor of the table "action"
"""
input action_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: action_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input action_stream_cursor_value_input {
  description: String
  value: String
}

enum authRefreshTokenTypes_enum {
  """Personal access token"""
  pat

  """Regular refresh token"""
  regular
}

"""
Boolean expression to compare columns of type "authRefreshTokenTypes_enum". All fields are combined with logical 'AND'.
"""
input authRefreshTokenTypes_enum_comparison_exp {
  _eq: authRefreshTokenTypes_enum
  _in: [authRefreshTokenTypes_enum!]
  _is_null: Boolean
  _neq: authRefreshTokenTypes_enum
  _nin: [authRefreshTokenTypes_enum!]
}

"""
User refresh tokens. Hasura auth uses them to rotate new access tokens as long as the refresh token is not expired. Don't modify its structure as Hasura Auth relies on it to function properly.
"""
type authRefreshTokens {
  createdAt: timestamptz!
  expiresAt: timestamptz!
  id: uuid!
  metadata(
    """JSON select path"""
    path: String
  ): jsonb
  type: authRefreshTokenTypes_enum!

  """An object relationship"""
  user: users!
  userId: uuid!
}

"""
aggregated selection of "auth.refresh_tokens"
"""
type authRefreshTokens_aggregate {
  aggregate: authRefreshTokens_aggregate_fields
  nodes: [authRefreshTokens!]!
}

input authRefreshTokens_aggregate_bool_exp {
  count: authRefreshTokens_aggregate_bool_exp_count
}

input authRefreshTokens_aggregate_bool_exp_count {
  arguments: [authRefreshTokens_select_column!]
  distinct: Boolean
  filter: authRefreshTokens_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "auth.refresh_tokens"
"""
type authRefreshTokens_aggregate_fields {
  count(columns: [authRefreshTokens_select_column!], distinct: Boolean): Int!
  max: authRefreshTokens_max_fields
  min: authRefreshTokens_min_fields
}

"""
order by aggregate values of table "auth.refresh_tokens"
"""
input authRefreshTokens_aggregate_order_by {
  count: order_by
  max: authRefreshTokens_max_order_by
  min: authRefreshTokens_min_order_by
}

"""
Boolean expression to filter rows from the table "auth.refresh_tokens". All fields are combined with a logical 'AND'.
"""
input authRefreshTokens_bool_exp {
  _and: [authRefreshTokens_bool_exp!]
  _not: authRefreshTokens_bool_exp
  _or: [authRefreshTokens_bool_exp!]
  createdAt: timestamptz_comparison_exp
  expiresAt: timestamptz_comparison_exp
  id: uuid_comparison_exp
  metadata: jsonb_comparison_exp
  type: authRefreshTokenTypes_enum_comparison_exp
  user: users_bool_exp
  userId: uuid_comparison_exp
}

"""aggregate max on columns"""
type authRefreshTokens_max_fields {
  createdAt: timestamptz
  expiresAt: timestamptz
  id: uuid
  userId: uuid
}

"""
order by max() on columns of table "auth.refresh_tokens"
"""
input authRefreshTokens_max_order_by {
  createdAt: order_by
  expiresAt: order_by
  id: order_by
  userId: order_by
}

"""aggregate min on columns"""
type authRefreshTokens_min_fields {
  createdAt: timestamptz
  expiresAt: timestamptz
  id: uuid
  userId: uuid
}

"""
order by min() on columns of table "auth.refresh_tokens"
"""
input authRefreshTokens_min_order_by {
  createdAt: order_by
  expiresAt: order_by
  id: order_by
  userId: order_by
}

"""
response of any mutation on the table "auth.refresh_tokens"
"""
type authRefreshTokens_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [authRefreshTokens!]!
}

"""Ordering options when selecting data from "auth.refresh_tokens"."""
input authRefreshTokens_order_by {
  createdAt: order_by
  expiresAt: order_by
  id: order_by
  metadata: order_by
  type: order_by
  user: users_order_by
  userId: order_by
}

"""
select columns of table "auth.refresh_tokens"
"""
enum authRefreshTokens_select_column {
  """column name"""
  createdAt

  """column name"""
  expiresAt

  """column name"""
  id

  """column name"""
  metadata

  """column name"""
  type

  """column name"""
  userId
}

"""
Streaming cursor of the table "authRefreshTokens"
"""
input authRefreshTokens_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: authRefreshTokens_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input authRefreshTokens_stream_cursor_value_input {
  createdAt: timestamptz
  expiresAt: timestamptz
  id: uuid
  metadata: jsonb
  type: authRefreshTokenTypes_enum
  userId: uuid
}

"""
Active providers for a given user. Don't modify its structure as Hasura Auth relies on it to function properly.
"""
type authUserProviders {
  createdAt: timestamptz!
  id: uuid!
  providerId: String!
  providerUserId: String!
  updatedAt: timestamptz!

  """An object relationship"""
  user: users!
  userId: uuid!
}

"""
aggregated selection of "auth.user_providers"
"""
type authUserProviders_aggregate {
  aggregate: authUserProviders_aggregate_fields
  nodes: [authUserProviders!]!
}

input authUserProviders_aggregate_bool_exp {
  count: authUserProviders_aggregate_bool_exp_count
}

input authUserProviders_aggregate_bool_exp_count {
  arguments: [authUserProviders_select_column!]
  distinct: Boolean
  filter: authUserProviders_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "auth.user_providers"
"""
type authUserProviders_aggregate_fields {
  count(columns: [authUserProviders_select_column!], distinct: Boolean): Int!
  max: authUserProviders_max_fields
  min: authUserProviders_min_fields
}

"""
order by aggregate values of table "auth.user_providers"
"""
input authUserProviders_aggregate_order_by {
  count: order_by
  max: authUserProviders_max_order_by
  min: authUserProviders_min_order_by
}

"""
Boolean expression to filter rows from the table "auth.user_providers". All fields are combined with a logical 'AND'.
"""
input authUserProviders_bool_exp {
  _and: [authUserProviders_bool_exp!]
  _not: authUserProviders_bool_exp
  _or: [authUserProviders_bool_exp!]
  createdAt: timestamptz_comparison_exp
  id: uuid_comparison_exp
  providerId: String_comparison_exp
  providerUserId: String_comparison_exp
  updatedAt: timestamptz_comparison_exp
  user: users_bool_exp
  userId: uuid_comparison_exp
}

"""aggregate max on columns"""
type authUserProviders_max_fields {
  createdAt: timestamptz
  id: uuid
  providerId: String
  providerUserId: String
  updatedAt: timestamptz
  userId: uuid
}

"""
order by max() on columns of table "auth.user_providers"
"""
input authUserProviders_max_order_by {
  createdAt: order_by
  id: order_by
  providerId: order_by
  providerUserId: order_by
  updatedAt: order_by
  userId: order_by
}

"""aggregate min on columns"""
type authUserProviders_min_fields {
  createdAt: timestamptz
  id: uuid
  providerId: String
  providerUserId: String
  updatedAt: timestamptz
  userId: uuid
}

"""
order by min() on columns of table "auth.user_providers"
"""
input authUserProviders_min_order_by {
  createdAt: order_by
  id: order_by
  providerId: order_by
  providerUserId: order_by
  updatedAt: order_by
  userId: order_by
}

"""
response of any mutation on the table "auth.user_providers"
"""
type authUserProviders_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [authUserProviders!]!
}

"""Ordering options when selecting data from "auth.user_providers"."""
input authUserProviders_order_by {
  createdAt: order_by
  id: order_by
  providerId: order_by
  providerUserId: order_by
  updatedAt: order_by
  user: users_order_by
  userId: order_by
}

"""
select columns of table "auth.user_providers"
"""
enum authUserProviders_select_column {
  """column name"""
  createdAt

  """column name"""
  id

  """column name"""
  providerId

  """column name"""
  providerUserId

  """column name"""
  updatedAt

  """column name"""
  userId
}

"""
Streaming cursor of the table "authUserProviders"
"""
input authUserProviders_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: authUserProviders_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input authUserProviders_stream_cursor_value_input {
  createdAt: timestamptz
  id: uuid
  providerId: String
  providerUserId: String
  updatedAt: timestamptz
  userId: uuid
}

"""
Roles of users. Don't modify its structure as Hasura Auth relies on it to function properly.
"""
type authUserRoles {
  createdAt: timestamptz!
  id: uuid!
  role: String!

  """An object relationship"""
  user: users!
  userId: uuid!
}

"""
aggregated selection of "auth.user_roles"
"""
type authUserRoles_aggregate {
  aggregate: authUserRoles_aggregate_fields
  nodes: [authUserRoles!]!
}

input authUserRoles_aggregate_bool_exp {
  count: authUserRoles_aggregate_bool_exp_count
}

input authUserRoles_aggregate_bool_exp_count {
  arguments: [authUserRoles_select_column!]
  distinct: Boolean
  filter: authUserRoles_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "auth.user_roles"
"""
type authUserRoles_aggregate_fields {
  count(columns: [authUserRoles_select_column!], distinct: Boolean): Int!
  max: authUserRoles_max_fields
  min: authUserRoles_min_fields
}

"""
order by aggregate values of table "auth.user_roles"
"""
input authUserRoles_aggregate_order_by {
  count: order_by
  max: authUserRoles_max_order_by
  min: authUserRoles_min_order_by
}

"""
Boolean expression to filter rows from the table "auth.user_roles". All fields are combined with a logical 'AND'.
"""
input authUserRoles_bool_exp {
  _and: [authUserRoles_bool_exp!]
  _not: authUserRoles_bool_exp
  _or: [authUserRoles_bool_exp!]
  createdAt: timestamptz_comparison_exp
  id: uuid_comparison_exp
  role: String_comparison_exp
  user: users_bool_exp
  userId: uuid_comparison_exp
}

"""aggregate max on columns"""
type authUserRoles_max_fields {
  createdAt: timestamptz
  id: uuid
  role: String
  userId: uuid
}

"""
order by max() on columns of table "auth.user_roles"
"""
input authUserRoles_max_order_by {
  createdAt: order_by
  id: order_by
  role: order_by
  userId: order_by
}

"""aggregate min on columns"""
type authUserRoles_min_fields {
  createdAt: timestamptz
  id: uuid
  role: String
  userId: uuid
}

"""
order by min() on columns of table "auth.user_roles"
"""
input authUserRoles_min_order_by {
  createdAt: order_by
  id: order_by
  role: order_by
  userId: order_by
}

"""
response of any mutation on the table "auth.user_roles"
"""
type authUserRoles_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [authUserRoles!]!
}

"""Ordering options when selecting data from "auth.user_roles"."""
input authUserRoles_order_by {
  createdAt: order_by
  id: order_by
  role: order_by
  user: users_order_by
  userId: order_by
}

"""
select columns of table "auth.user_roles"
"""
enum authUserRoles_select_column {
  """column name"""
  createdAt

  """column name"""
  id

  """column name"""
  role

  """column name"""
  userId
}

"""
Streaming cursor of the table "authUserRoles"
"""
input authUserRoles_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: authUserRoles_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input authUserRoles_stream_cursor_value_input {
  createdAt: timestamptz
  id: uuid
  role: String
  userId: uuid
}

"""
User webauthn security keys. Don't modify its structure as Hasura Auth relies on it to function properly.
"""
type authUserSecurityKeys {
  id: uuid!
  nickname: String

  """An object relationship"""
  user: users!
  userId: uuid!
}

"""
aggregated selection of "auth.user_security_keys"
"""
type authUserSecurityKeys_aggregate {
  aggregate: authUserSecurityKeys_aggregate_fields
  nodes: [authUserSecurityKeys!]!
}

input authUserSecurityKeys_aggregate_bool_exp {
  count: authUserSecurityKeys_aggregate_bool_exp_count
}

input authUserSecurityKeys_aggregate_bool_exp_count {
  arguments: [authUserSecurityKeys_select_column!]
  distinct: Boolean
  filter: authUserSecurityKeys_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "auth.user_security_keys"
"""
type authUserSecurityKeys_aggregate_fields {
  count(columns: [authUserSecurityKeys_select_column!], distinct: Boolean): Int!
  max: authUserSecurityKeys_max_fields
  min: authUserSecurityKeys_min_fields
}

"""
order by aggregate values of table "auth.user_security_keys"
"""
input authUserSecurityKeys_aggregate_order_by {
  count: order_by
  max: authUserSecurityKeys_max_order_by
  min: authUserSecurityKeys_min_order_by
}

"""
Boolean expression to filter rows from the table "auth.user_security_keys". All fields are combined with a logical 'AND'.
"""
input authUserSecurityKeys_bool_exp {
  _and: [authUserSecurityKeys_bool_exp!]
  _not: authUserSecurityKeys_bool_exp
  _or: [authUserSecurityKeys_bool_exp!]
  id: uuid_comparison_exp
  nickname: String_comparison_exp
  user: users_bool_exp
  userId: uuid_comparison_exp
}

"""aggregate max on columns"""
type authUserSecurityKeys_max_fields {
  id: uuid
  nickname: String
  userId: uuid
}

"""
order by max() on columns of table "auth.user_security_keys"
"""
input authUserSecurityKeys_max_order_by {
  id: order_by
  nickname: order_by
  userId: order_by
}

"""aggregate min on columns"""
type authUserSecurityKeys_min_fields {
  id: uuid
  nickname: String
  userId: uuid
}

"""
order by min() on columns of table "auth.user_security_keys"
"""
input authUserSecurityKeys_min_order_by {
  id: order_by
  nickname: order_by
  userId: order_by
}

"""
response of any mutation on the table "auth.user_security_keys"
"""
type authUserSecurityKeys_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [authUserSecurityKeys!]!
}

"""Ordering options when selecting data from "auth.user_security_keys"."""
input authUserSecurityKeys_order_by {
  id: order_by
  nickname: order_by
  user: users_order_by
  userId: order_by
}

"""
select columns of table "auth.user_security_keys"
"""
enum authUserSecurityKeys_select_column {
  """column name"""
  id

  """column name"""
  nickname

  """column name"""
  userId
}

"""
Streaming cursor of the table "authUserSecurityKeys"
"""
input authUserSecurityKeys_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: authUserSecurityKeys_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input authUserSecurityKeys_stream_cursor_value_input {
  id: uuid
  nickname: String
  userId: uuid
}

scalar citext

"""
Boolean expression to compare columns of type "citext". All fields are combined with logical 'AND'.
"""
input citext_comparison_exp {
  _eq: citext
  _gt: citext
  _gte: citext

  """does the column match the given case-insensitive pattern"""
  _ilike: citext
  _in: [citext!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: citext
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: citext
  _lt: citext
  _lte: citext
  _neq: citext

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: citext
  _nin: [citext!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: citext

  """does the column NOT match the given pattern"""
  _nlike: citext

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: citext

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: citext

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: citext

  """does the column match the given SQL regular expression"""
  _similar: citext
}

"""ordering argument of a cursor"""
enum cursor_ordering {
  """ascending ordering of the cursor"""
  ASC

  """descending ordering of the cursor"""
  DESC
}

input device_associated_pools_args {
  device_row: devices_scalar
}

input device_dissociated_pools_args {
  device_row: devices_scalar
}

"""Device to Pool association table"""
type device_pools {
  """An object relationship"""
  device: devices!
  deviceId: uuid!

  """An object relationship"""
  pool: pools!
  poolId: uuid!
}

"""
aggregated selection of "device_pools"
"""
type device_pools_aggregate {
  aggregate: device_pools_aggregate_fields
  nodes: [device_pools!]!
}

"""
aggregate fields of "device_pools"
"""
type device_pools_aggregate_fields {
  count(columns: [device_pools_select_column!], distinct: Boolean): Int!
  max: device_pools_max_fields
  min: device_pools_min_fields
}

"""
Boolean expression to filter rows from the table "device_pools". All fields are combined with a logical 'AND'.
"""
input device_pools_bool_exp {
  _and: [device_pools_bool_exp!]
  _not: device_pools_bool_exp
  _or: [device_pools_bool_exp!]
  device: devices_bool_exp
  deviceId: uuid_comparison_exp
  pool: pools_bool_exp
  poolId: uuid_comparison_exp
}

"""
unique or primary key constraints on table "device_pools"
"""
enum device_pools_constraint {
  """
  unique or primary key constraint on columns "pool_id", "device_id"
  """
  device_pools_pkey
}

"""
input type for inserting data into table "device_pools"
"""
input device_pools_insert_input {
  deviceId: uuid
  pool: pools_obj_rel_insert_input
  poolId: uuid
}

"""aggregate max on columns"""
type device_pools_max_fields {
  deviceId: uuid
  poolId: uuid
}

"""aggregate min on columns"""
type device_pools_min_fields {
  deviceId: uuid
  poolId: uuid
}

"""
response of any mutation on the table "device_pools"
"""
type device_pools_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [device_pools!]!
}

"""
on_conflict condition type for table "device_pools"
"""
input device_pools_on_conflict {
  constraint: device_pools_constraint!
  update_columns: [device_pools_update_column!]! = []
  where: device_pools_bool_exp
}

"""Ordering options when selecting data from "device_pools"."""
input device_pools_order_by {
  device: devices_order_by
  deviceId: order_by
  pool: pools_order_by
  poolId: order_by
}

"""
select columns of table "device_pools"
"""
enum device_pools_select_column {
  """column name"""
  deviceId

  """column name"""
  poolId
}

"""
Streaming cursor of the table "device_pools"
"""
input device_pools_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: device_pools_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input device_pools_stream_cursor_value_input {
  deviceId: uuid
  poolId: uuid
}

"""
placeholder for update columns of table "device_pools" (current role has no relevant permissions)
"""
enum device_pools_update_column {
  """placeholder (do not use)"""
  _PLACEHOLDER
}

"""Table containing devices data"""
type devices {
  alternateDns: Boolean

  """Used as Computed Field on Devices Table"""
  associatedPools(
    """distinct select on columns"""
    distinct_on: [pools_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pools_order_by!]

    """filter the rows returned"""
    where: pools_bool_exp
  ): [pools!]
  createdAt: timestamptz!
  createdBy: uuid!
  description: String
  displayName: String!

  """Used as Computed Field on Devices Table"""
  dissociatedPools(
    """distinct select on columns"""
    distinct_on: [pools_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pools_order_by!]

    """filter the rows returned"""
    where: pools_bool_exp
  ): [pools!]
  id: uuid!
  ip: String!
  metadata(
    """JSON select path"""
    path: String
  ): jsonb
  orgId: uuid!
  proxyIp: Boolean
  publicIp: String
  tags: [String!]
  updatedAt: timestamptz!
  updatedBy: uuid!
  version: String
}

"""
aggregated selection of "devices"
"""
type devices_aggregate {
  aggregate: devices_aggregate_fields
  nodes: [devices!]!
}

"""
aggregate fields of "devices"
"""
type devices_aggregate_fields {
  count(columns: [devices_select_column!], distinct: Boolean): Int!
  max: devices_max_fields
  min: devices_min_fields
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input devices_append_input {
  metadata: jsonb
}

"""
Boolean expression to filter rows from the table "devices". All fields are combined with a logical 'AND'.
"""
input devices_bool_exp {
  _and: [devices_bool_exp!]
  _not: devices_bool_exp
  _or: [devices_bool_exp!]
  alternateDns: Boolean_comparison_exp
  associatedPools: pools_bool_exp
  createdAt: timestamptz_comparison_exp
  createdBy: uuid_comparison_exp
  description: String_comparison_exp
  displayName: String_comparison_exp
  dissociatedPools: pools_bool_exp
  id: uuid_comparison_exp
  ip: String_comparison_exp
  metadata: jsonb_comparison_exp
  orgId: uuid_comparison_exp
  proxyIp: Boolean_comparison_exp
  publicIp: String_comparison_exp
  tags: String_array_comparison_exp
  updatedAt: timestamptz_comparison_exp
  updatedBy: uuid_comparison_exp
  version: String_comparison_exp
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input devices_delete_at_path_input {
  metadata: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input devices_delete_elem_input {
  metadata: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input devices_delete_key_input {
  metadata: String
}

"""aggregate max on columns"""
type devices_max_fields {
  createdAt: timestamptz
  createdBy: uuid
  description: String
  displayName: String
  id: uuid
  ip: String
  orgId: uuid
  publicIp: String
  tags: [String!]
  updatedAt: timestamptz
  updatedBy: uuid
  version: String
}

"""aggregate min on columns"""
type devices_min_fields {
  createdAt: timestamptz
  createdBy: uuid
  description: String
  displayName: String
  id: uuid
  ip: String
  orgId: uuid
  publicIp: String
  tags: [String!]
  updatedAt: timestamptz
  updatedBy: uuid
  version: String
}

"""
response of any mutation on the table "devices"
"""
type devices_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [devices!]!
}

"""Ordering options when selecting data from "devices"."""
input devices_order_by {
  alternateDns: order_by
  associatedPools_aggregate: pools_aggregate_order_by
  createdAt: order_by
  createdBy: order_by
  description: order_by
  displayName: order_by
  dissociatedPools_aggregate: pools_aggregate_order_by
  id: order_by
  ip: order_by
  metadata: order_by
  orgId: order_by
  proxyIp: order_by
  publicIp: order_by
  tags: order_by
  updatedAt: order_by
  updatedBy: order_by
  version: order_by
}

"""primary key columns input for table: devices"""
input devices_pk_columns_input {
  id: uuid!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input devices_prepend_input {
  metadata: jsonb
}

scalar devices_scalar

"""
select columns of table "devices"
"""
enum devices_select_column {
  """column name"""
  alternateDns

  """column name"""
  createdAt

  """column name"""
  createdBy

  """column name"""
  description

  """column name"""
  displayName

  """column name"""
  id

  """column name"""
  ip

  """column name"""
  metadata

  """column name"""
  orgId

  """column name"""
  proxyIp

  """column name"""
  publicIp

  """column name"""
  tags

  """column name"""
  updatedAt

  """column name"""
  updatedBy

  """column name"""
  version
}

"""
input type for updating data in table "devices"
"""
input devices_set_input {
  alternateDns: Boolean
  description: String
  metadata: jsonb
  proxyIp: Boolean
  tags: [String!]
}

"""
Streaming cursor of the table "devices"
"""
input devices_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: devices_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input devices_stream_cursor_value_input {
  alternateDns: Boolean
  createdAt: timestamptz
  createdBy: uuid
  description: String
  displayName: String
  id: uuid
  ip: String
  metadata: jsonb
  orgId: uuid
  proxyIp: Boolean
  publicIp: String
  tags: [String!]
  updatedAt: timestamptz
  updatedBy: uuid
  version: String
}

input devices_updates {
  """append existing jsonb value of filtered columns with new jsonb value"""
  _append: devices_append_input

  """
  delete the field or element with specified path (for JSON arrays, negative integers count from the end)
  """
  _delete_at_path: devices_delete_at_path_input

  """
  delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
  """
  _delete_elem: devices_delete_elem_input

  """
  delete key/value pair or string element. key/value pairs are matched based on their key value
  """
  _delete_key: devices_delete_key_input

  """prepend existing jsonb value of filtered columns with new jsonb value"""
  _prepend: devices_prepend_input

  """sets the columns of the filtered rows to the given values"""
  _set: devices_set_input

  """filter the rows which have to be updated"""
  where: devices_bool_exp!
}

"""policy direction enum"""
type direction {
  description: String!
  value: String!
}

"""
Boolean expression to filter rows from the table "direction". All fields are combined with a logical 'AND'.
"""
input direction_bool_exp {
  _and: [direction_bool_exp!]
  _not: direction_bool_exp
  _or: [direction_bool_exp!]
  description: String_comparison_exp
  value: String_comparison_exp
}

enum direction_enum {
  """EGRESS"""
  egress

  """INGRESS"""
  ingress
}

"""
Boolean expression to compare columns of type "direction_enum". All fields are combined with logical 'AND'.
"""
input direction_enum_comparison_exp {
  _eq: direction_enum
  _in: [direction_enum!]
  _is_null: Boolean
  _neq: direction_enum
  _nin: [direction_enum!]
}

"""Ordering options when selecting data from "direction"."""
input direction_order_by {
  description: order_by
  value: order_by
}

"""
select columns of table "direction"
"""
enum direction_select_column {
  """column name"""
  description

  """column name"""
  value
}

"""
Streaming cursor of the table "direction"
"""
input direction_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: direction_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input direction_stream_cursor_value_input {
  description: String
  value: String
}

"""Table containing user groups that belongs to an organization"""
type groups {
  createdAt: timestamptz!
  createdBy: uuid!
  description: String
  displayName: String!
  id: uuid!
  metadata(
    """JSON select path"""
    path: String
  ): jsonb
  orgId: uuid!

  """An object relationship"""
  organization: organizations!
  tags: [String!]
  updatedAt: timestamptz!
  updatedBy: uuid!
}

"""
aggregated selection of "groups"
"""
type groups_aggregate {
  aggregate: groups_aggregate_fields
  nodes: [groups!]!
}

input groups_aggregate_bool_exp {
  count: groups_aggregate_bool_exp_count
}

input groups_aggregate_bool_exp_count {
  arguments: [groups_select_column!]
  distinct: Boolean
  filter: groups_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "groups"
"""
type groups_aggregate_fields {
  count(columns: [groups_select_column!], distinct: Boolean): Int!
  max: groups_max_fields
  min: groups_min_fields
}

"""
order by aggregate values of table "groups"
"""
input groups_aggregate_order_by {
  count: order_by
  max: groups_max_order_by
  min: groups_min_order_by
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input groups_append_input {
  metadata: jsonb
}

"""
input type for inserting array relation for remote table "groups"
"""
input groups_arr_rel_insert_input {
  data: [groups_insert_input!]!

  """upsert condition"""
  on_conflict: groups_on_conflict
}

"""
Boolean expression to filter rows from the table "groups". All fields are combined with a logical 'AND'.
"""
input groups_bool_exp {
  _and: [groups_bool_exp!]
  _not: groups_bool_exp
  _or: [groups_bool_exp!]
  createdAt: timestamptz_comparison_exp
  createdBy: uuid_comparison_exp
  description: String_comparison_exp
  displayName: String_comparison_exp
  id: uuid_comparison_exp
  metadata: jsonb_comparison_exp
  orgId: uuid_comparison_exp
  organization: organizations_bool_exp
  tags: String_array_comparison_exp
  updatedAt: timestamptz_comparison_exp
  updatedBy: uuid_comparison_exp
}

"""
unique or primary key constraints on table "groups"
"""
enum groups_constraint {
  """
  unique or primary key constraint on columns "display_name", "org_id"
  """
  groups_org_id_display_name_key

  """
  unique or primary key constraint on columns "id"
  """
  groups_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input groups_delete_at_path_input {
  metadata: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input groups_delete_elem_input {
  metadata: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input groups_delete_key_input {
  metadata: String
}

"""
input type for inserting data into table "groups"
"""
input groups_insert_input {
  description: String
  displayName: String
  metadata: jsonb
  organization: organizations_obj_rel_insert_input
  tags: [String!]
}

"""aggregate max on columns"""
type groups_max_fields {
  createdAt: timestamptz
  createdBy: uuid
  description: String
  displayName: String
  id: uuid
  orgId: uuid
  tags: [String!]
  updatedAt: timestamptz
  updatedBy: uuid
}

"""
order by max() on columns of table "groups"
"""
input groups_max_order_by {
  createdAt: order_by
  createdBy: order_by
  description: order_by
  displayName: order_by
  id: order_by
  orgId: order_by
  tags: order_by
  updatedAt: order_by
  updatedBy: order_by
}

"""aggregate min on columns"""
type groups_min_fields {
  createdAt: timestamptz
  createdBy: uuid
  description: String
  displayName: String
  id: uuid
  orgId: uuid
  tags: [String!]
  updatedAt: timestamptz
  updatedBy: uuid
}

"""
order by min() on columns of table "groups"
"""
input groups_min_order_by {
  createdAt: order_by
  createdBy: order_by
  description: order_by
  displayName: order_by
  id: order_by
  orgId: order_by
  tags: order_by
  updatedAt: order_by
  updatedBy: order_by
}

"""
response of any mutation on the table "groups"
"""
type groups_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [groups!]!
}

"""
input type for inserting object relation for remote table "groups"
"""
input groups_obj_rel_insert_input {
  data: groups_insert_input!

  """upsert condition"""
  on_conflict: groups_on_conflict
}

"""
on_conflict condition type for table "groups"
"""
input groups_on_conflict {
  constraint: groups_constraint!
  update_columns: [groups_update_column!]! = []
  where: groups_bool_exp
}

"""Ordering options when selecting data from "groups"."""
input groups_order_by {
  createdAt: order_by
  createdBy: order_by
  description: order_by
  displayName: order_by
  id: order_by
  metadata: order_by
  orgId: order_by
  organization: organizations_order_by
  tags: order_by
  updatedAt: order_by
  updatedBy: order_by
}

"""primary key columns input for table: groups"""
input groups_pk_columns_input {
  id: uuid!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input groups_prepend_input {
  metadata: jsonb
}

"""
select columns of table "groups"
"""
enum groups_select_column {
  """column name"""
  createdAt

  """column name"""
  createdBy

  """column name"""
  description

  """column name"""
  displayName

  """column name"""
  id

  """column name"""
  metadata

  """column name"""
  orgId

  """column name"""
  tags

  """column name"""
  updatedAt

  """column name"""
  updatedBy
}

"""
input type for updating data in table "groups"
"""
input groups_set_input {
  description: String
  displayName: String
  metadata: jsonb
  tags: [String!]
}

"""
Streaming cursor of the table "groups"
"""
input groups_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: groups_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input groups_stream_cursor_value_input {
  createdAt: timestamptz
  createdBy: uuid
  description: String
  displayName: String
  id: uuid
  metadata: jsonb
  orgId: uuid
  tags: [String!]
  updatedAt: timestamptz
  updatedBy: uuid
}

"""
update columns of table "groups"
"""
enum groups_update_column {
  """column name"""
  description

  """column name"""
  displayName

  """column name"""
  metadata

  """column name"""
  tags
}

input groups_updates {
  """append existing jsonb value of filtered columns with new jsonb value"""
  _append: groups_append_input

  """
  delete the field or element with specified path (for JSON arrays, negative integers count from the end)
  """
  _delete_at_path: groups_delete_at_path_input

  """
  delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
  """
  _delete_elem: groups_delete_elem_input

  """
  delete key/value pair or string element. key/value pairs are matched based on their key value
  """
  _delete_key: groups_delete_key_input

  """prepend existing jsonb value of filtered columns with new jsonb value"""
  _prepend: groups_prepend_input

  """sets the columns of the filtered rows to the given values"""
  _set: groups_set_input

  """filter the rows which have to be updated"""
  where: groups_bool_exp!
}

scalar jsonb

input jsonb_cast_exp {
  String: String_comparison_exp
}

"""
Boolean expression to compare columns of type "jsonb". All fields are combined with logical 'AND'.
"""
input jsonb_comparison_exp {
  _cast: jsonb_cast_exp

  """is the column contained in the given json value"""
  _contained_in: jsonb

  """does the column contain the given json value at the top level"""
  _contains: jsonb
  _eq: jsonb
  _gt: jsonb
  _gte: jsonb

  """does the string exist as a top-level key in the column"""
  _has_key: String

  """do all of these strings exist as top-level keys in the column"""
  _has_keys_all: [String!]

  """do any of these strings exist as top-level keys in the column"""
  _has_keys_any: [String!]
  _in: [jsonb!]
  _is_null: Boolean
  _lt: jsonb
  _lte: jsonb
  _neq: jsonb
  _nin: [jsonb!]
}

"""mutation root"""
type mutation_root {
  """
  delete single row from the table: "auth.refresh_tokens"
  """
  deleteAuthRefreshToken(id: uuid!): authRefreshTokens

  """
  delete data from the table: "auth.refresh_tokens"
  """
  deleteAuthRefreshTokens(
    """filter the rows which have to be deleted"""
    where: authRefreshTokens_bool_exp!
  ): authRefreshTokens_mutation_response

  """
  delete single row from the table: "auth.user_providers"
  """
  deleteAuthUserProvider(id: uuid!): authUserProviders

  """
  delete data from the table: "auth.user_providers"
  """
  deleteAuthUserProviders(
    """filter the rows which have to be deleted"""
    where: authUserProviders_bool_exp!
  ): authUserProviders_mutation_response

  """
  delete single row from the table: "auth.user_roles"
  """
  deleteAuthUserRole(id: uuid!): authUserRoles

  """
  delete data from the table: "auth.user_roles"
  """
  deleteAuthUserRoles(
    """filter the rows which have to be deleted"""
    where: authUserRoles_bool_exp!
  ): authUserRoles_mutation_response

  """
  delete single row from the table: "auth.user_security_keys"
  """
  deleteAuthUserSecurityKey(id: uuid!): authUserSecurityKeys

  """
  delete data from the table: "auth.user_security_keys"
  """
  deleteAuthUserSecurityKeys(
    """filter the rows which have to be deleted"""
    where: authUserSecurityKeys_bool_exp!
  ): authUserSecurityKeys_mutation_response

  """
  delete data from the table: "device_pools"
  """
  delete_device_pools(
    """filter the rows which have to be deleted"""
    where: device_pools_bool_exp!
  ): device_pools_mutation_response

  """
  delete single row from the table: "device_pools"
  """
  delete_device_pools_by_pk(deviceId: uuid!, poolId: uuid!): device_pools

  """
  delete data from the table: "devices"
  """
  delete_devices(
    """filter the rows which have to be deleted"""
    where: devices_bool_exp!
  ): devices_mutation_response

  """
  delete single row from the table: "devices"
  """
  delete_devices_by_pk(id: uuid!): devices

  """
  delete data from the table: "groups"
  """
  delete_groups(
    """filter the rows which have to be deleted"""
    where: groups_bool_exp!
  ): groups_mutation_response

  """
  delete single row from the table: "groups"
  """
  delete_groups_by_pk(id: uuid!): groups

  """
  delete data from the table: "organizations"
  """
  delete_organizations(
    """filter the rows which have to be deleted"""
    where: organizations_bool_exp!
  ): organizations_mutation_response

  """
  delete single row from the table: "organizations"
  """
  delete_organizations_by_pk(id: uuid!): organizations

  """
  delete data from the table: "policies"
  """
  delete_policies(
    """filter the rows which have to be deleted"""
    where: policies_bool_exp!
  ): policies_mutation_response

  """
  delete single row from the table: "policies"
  """
  delete_policies_by_pk(id: uuid!): policies

  """
  delete data from the table: "pools"
  """
  delete_pools(
    """filter the rows which have to be deleted"""
    where: pools_bool_exp!
  ): pools_mutation_response

  """
  delete single row from the table: "pools"
  """
  delete_pools_by_pk(id: uuid!): pools

  """
  delete data from the table: "rules"
  """
  delete_rules(
    """filter the rows which have to be deleted"""
    where: rules_bool_exp!
  ): rules_mutation_response

  """
  delete single row from the table: "rules"
  """
  delete_rules_by_pk(id: uuid!): rules

  """
  delete data from the table: "user_groups"
  """
  delete_user_groups(
    """filter the rows which have to be deleted"""
    where: user_groups_bool_exp!
  ): user_groups_mutation_response

  """
  delete single row from the table: "user_groups"
  """
  delete_user_groups_by_pk(groupId: uuid!, userId: uuid!): user_groups

  """
  delete data from the table: "user_org_roles"
  """
  delete_user_org_roles(
    """filter the rows which have to be deleted"""
    where: user_org_roles_bool_exp!
  ): user_org_roles_mutation_response

  """
  delete single row from the table: "user_org_roles"
  """
  delete_user_org_roles_by_pk(orgId: uuid!, userId: uuid!): user_org_roles

  """
  insert data into the table: "device_pools"
  """
  insert_device_pools(
    """the rows to be inserted"""
    objects: [device_pools_insert_input!]!

    """upsert condition"""
    on_conflict: device_pools_on_conflict
  ): device_pools_mutation_response

  """
  insert a single row into the table: "device_pools"
  """
  insert_device_pools_one(
    """the row to be inserted"""
    object: device_pools_insert_input!

    """upsert condition"""
    on_conflict: device_pools_on_conflict
  ): device_pools

  """
  insert data into the table: "groups"
  """
  insert_groups(
    """the rows to be inserted"""
    objects: [groups_insert_input!]!

    """upsert condition"""
    on_conflict: groups_on_conflict
  ): groups_mutation_response

  """
  insert a single row into the table: "groups"
  """
  insert_groups_one(
    """the row to be inserted"""
    object: groups_insert_input!

    """upsert condition"""
    on_conflict: groups_on_conflict
  ): groups

  """
  insert data into the table: "organizations"
  """
  insert_organizations(
    """the rows to be inserted"""
    objects: [organizations_insert_input!]!

    """upsert condition"""
    on_conflict: organizations_on_conflict
  ): organizations_mutation_response

  """
  insert a single row into the table: "organizations"
  """
  insert_organizations_one(
    """the row to be inserted"""
    object: organizations_insert_input!

    """upsert condition"""
    on_conflict: organizations_on_conflict
  ): organizations

  """
  insert data into the table: "policies"
  """
  insert_policies(
    """the rows to be inserted"""
    objects: [policies_insert_input!]!

    """upsert condition"""
    on_conflict: policies_on_conflict
  ): policies_mutation_response

  """
  insert a single row into the table: "policies"
  """
  insert_policies_one(
    """the row to be inserted"""
    object: policies_insert_input!

    """upsert condition"""
    on_conflict: policies_on_conflict
  ): policies

  """
  insert data into the table: "pools"
  """
  insert_pools(
    """the rows to be inserted"""
    objects: [pools_insert_input!]!

    """upsert condition"""
    on_conflict: pools_on_conflict
  ): pools_mutation_response

  """
  insert a single row into the table: "pools"
  """
  insert_pools_one(
    """the row to be inserted"""
    object: pools_insert_input!

    """upsert condition"""
    on_conflict: pools_on_conflict
  ): pools

  """
  insert data into the table: "rules"
  """
  insert_rules(
    """the rows to be inserted"""
    objects: [rules_insert_input!]!

    """upsert condition"""
    on_conflict: rules_on_conflict
  ): rules_mutation_response

  """
  insert a single row into the table: "rules"
  """
  insert_rules_one(
    """the row to be inserted"""
    object: rules_insert_input!

    """upsert condition"""
    on_conflict: rules_on_conflict
  ): rules

  """
  insert data into the table: "user_groups"
  """
  insert_user_groups(
    """the rows to be inserted"""
    objects: [user_groups_insert_input!]!

    """upsert condition"""
    on_conflict: user_groups_on_conflict
  ): user_groups_mutation_response

  """
  insert a single row into the table: "user_groups"
  """
  insert_user_groups_one(
    """the row to be inserted"""
    object: user_groups_insert_input!

    """upsert condition"""
    on_conflict: user_groups_on_conflict
  ): user_groups

  """
  insert data into the table: "user_org_roles"
  """
  insert_user_org_roles(
    """the rows to be inserted"""
    objects: [user_org_roles_insert_input!]!

    """upsert condition"""
    on_conflict: user_org_roles_on_conflict
  ): user_org_roles_mutation_response

  """
  insert a single row into the table: "user_org_roles"
  """
  insert_user_org_roles_one(
    """the row to be inserted"""
    object: user_org_roles_insert_input!

    """upsert condition"""
    on_conflict: user_org_roles_on_conflict
  ): user_org_roles

  """
  update single row of the table: "auth.users"
  """
  updateUser(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: users_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: users_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: users_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: users_delete_key_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: users_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: users_set_input
    pk_columns: users_pk_columns_input!
  ): users

  """
  update data of the table: "auth.users"
  """
  updateUsers(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: users_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: users_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: users_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: users_delete_key_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: users_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: users_set_input

    """filter the rows which have to be updated"""
    where: users_bool_exp!
  ): users_mutation_response

  """
  update data of the table: "devices"
  """
  update_devices(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: devices_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: devices_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: devices_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: devices_delete_key_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: devices_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: devices_set_input

    """filter the rows which have to be updated"""
    where: devices_bool_exp!
  ): devices_mutation_response

  """
  update single row of the table: "devices"
  """
  update_devices_by_pk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: devices_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: devices_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: devices_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: devices_delete_key_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: devices_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: devices_set_input
    pk_columns: devices_pk_columns_input!
  ): devices

  """
  update multiples rows of table: "devices"
  """
  update_devices_many(
    """updates to execute, in order"""
    updates: [devices_updates!]!
  ): [devices_mutation_response]

  """
  update data of the table: "groups"
  """
  update_groups(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: groups_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: groups_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: groups_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: groups_delete_key_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: groups_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: groups_set_input

    """filter the rows which have to be updated"""
    where: groups_bool_exp!
  ): groups_mutation_response

  """
  update single row of the table: "groups"
  """
  update_groups_by_pk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: groups_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: groups_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: groups_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: groups_delete_key_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: groups_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: groups_set_input
    pk_columns: groups_pk_columns_input!
  ): groups

  """
  update multiples rows of table: "groups"
  """
  update_groups_many(
    """updates to execute, in order"""
    updates: [groups_updates!]!
  ): [groups_mutation_response]

  """
  update data of the table: "organizations"
  """
  update_organizations(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: organizations_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: organizations_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: organizations_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: organizations_delete_key_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: organizations_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: organizations_set_input

    """filter the rows which have to be updated"""
    where: organizations_bool_exp!
  ): organizations_mutation_response

  """
  update single row of the table: "organizations"
  """
  update_organizations_by_pk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: organizations_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: organizations_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: organizations_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: organizations_delete_key_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: organizations_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: organizations_set_input
    pk_columns: organizations_pk_columns_input!
  ): organizations

  """
  update multiples rows of table: "organizations"
  """
  update_organizations_many(
    """updates to execute, in order"""
    updates: [organizations_updates!]!
  ): [organizations_mutation_response]

  """
  update data of the table: "policies"
  """
  update_policies(
    """increments the numeric columns with given value of the filtered values"""
    _inc: policies_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: policies_set_input

    """filter the rows which have to be updated"""
    where: policies_bool_exp!
  ): policies_mutation_response

  """
  update single row of the table: "policies"
  """
  update_policies_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: policies_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: policies_set_input
    pk_columns: policies_pk_columns_input!
  ): policies

  """
  update multiples rows of table: "policies"
  """
  update_policies_many(
    """updates to execute, in order"""
    updates: [policies_updates!]!
  ): [policies_mutation_response]

  """
  update data of the table: "pools"
  """
  update_pools(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: pools_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: pools_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: pools_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: pools_delete_key_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: pools_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: pools_set_input

    """filter the rows which have to be updated"""
    where: pools_bool_exp!
  ): pools_mutation_response

  """
  update single row of the table: "pools"
  """
  update_pools_by_pk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: pools_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: pools_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: pools_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: pools_delete_key_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: pools_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: pools_set_input
    pk_columns: pools_pk_columns_input!
  ): pools

  """
  update multiples rows of table: "pools"
  """
  update_pools_many(
    """updates to execute, in order"""
    updates: [pools_updates!]!
  ): [pools_mutation_response]

  """
  update data of the table: "rules"
  """
  update_rules(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: rules_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: rules_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: rules_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: rules_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: rules_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: rules_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: rules_set_input

    """filter the rows which have to be updated"""
    where: rules_bool_exp!
  ): rules_mutation_response

  """
  update single row of the table: "rules"
  """
  update_rules_by_pk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: rules_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: rules_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: rules_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: rules_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: rules_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: rules_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: rules_set_input
    pk_columns: rules_pk_columns_input!
  ): rules

  """
  update multiples rows of table: "rules"
  """
  update_rules_many(
    """updates to execute, in order"""
    updates: [rules_updates!]!
  ): [rules_mutation_response]

  """
  update data of the table: "user_org_roles"
  """
  update_user_org_roles(
    """sets the columns of the filtered rows to the given values"""
    _set: user_org_roles_set_input

    """filter the rows which have to be updated"""
    where: user_org_roles_bool_exp!
  ): user_org_roles_mutation_response

  """
  update single row of the table: "user_org_roles"
  """
  update_user_org_roles_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: user_org_roles_set_input
    pk_columns: user_org_roles_pk_columns_input!
  ): user_org_roles

  """
  update multiples rows of table: "user_org_roles"
  """
  update_user_org_roles_many(
    """updates to execute, in order"""
    updates: [user_org_roles_updates!]!
  ): [user_org_roles_mutation_response]

  """
  update multiples rows of table: "auth.users"
  """
  update_users_many(
    """updates to execute, in order"""
    updates: [users_updates!]!
  ): [users_mutation_response]
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

"""
Table containing organizations owned by users. Auto-enroll members based on email domain
"""
type organizations {
  allowedEmailDomains: [String!]
  allowedEmails: [String!]
  autoEnroll: Boolean!
  blockedEmailDomains: [String!]
  blockedEmails: [String!]
  createdAt: timestamptz!
  createdBy: uuid!
  description: String
  displayName: String!

  """An array relationship"""
  groups(
    """distinct select on columns"""
    distinct_on: [groups_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [groups_order_by!]

    """filter the rows returned"""
    where: groups_bool_exp
  ): [groups!]!

  """An aggregate relationship"""
  groups_aggregate(
    """distinct select on columns"""
    distinct_on: [groups_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [groups_order_by!]

    """filter the rows returned"""
    where: groups_bool_exp
  ): groups_aggregate!
  id: uuid!
  metadata(
    """JSON select path"""
    path: String
  ): jsonb

  """An object relationship"""
  owner: users!
  ownerId: uuid!

  """An array relationship"""
  subscriptions(
    """distinct select on columns"""
    distinct_on: [subscriptions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [subscriptions_order_by!]

    """filter the rows returned"""
    where: subscriptions_bool_exp
  ): [subscriptions!]!

  """An aggregate relationship"""
  subscriptions_aggregate(
    """distinct select on columns"""
    distinct_on: [subscriptions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [subscriptions_order_by!]

    """filter the rows returned"""
    where: subscriptions_bool_exp
  ): subscriptions_aggregate!
  tags: [String!]
  updatedAt: timestamptz!
  updatedBy: uuid!

  """An array relationship"""
  users(
    """distinct select on columns"""
    distinct_on: [user_org_roles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_org_roles_order_by!]

    """filter the rows returned"""
    where: user_org_roles_bool_exp
  ): [user_org_roles!]!

  """An aggregate relationship"""
  users_aggregate(
    """distinct select on columns"""
    distinct_on: [user_org_roles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_org_roles_order_by!]

    """filter the rows returned"""
    where: user_org_roles_bool_exp
  ): user_org_roles_aggregate!
}

"""
aggregated selection of "organizations"
"""
type organizations_aggregate {
  aggregate: organizations_aggregate_fields
  nodes: [organizations!]!
}

"""
aggregate fields of "organizations"
"""
type organizations_aggregate_fields {
  count(columns: [organizations_select_column!], distinct: Boolean): Int!
  max: organizations_max_fields
  min: organizations_min_fields
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input organizations_append_input {
  metadata: jsonb
}

"""
Boolean expression to filter rows from the table "organizations". All fields are combined with a logical 'AND'.
"""
input organizations_bool_exp {
  _and: [organizations_bool_exp!]
  _not: organizations_bool_exp
  _or: [organizations_bool_exp!]
  allowedEmailDomains: String_array_comparison_exp
  allowedEmails: String_array_comparison_exp
  autoEnroll: Boolean_comparison_exp
  blockedEmailDomains: String_array_comparison_exp
  blockedEmails: String_array_comparison_exp
  createdAt: timestamptz_comparison_exp
  createdBy: uuid_comparison_exp
  description: String_comparison_exp
  displayName: String_comparison_exp
  groups: groups_bool_exp
  groups_aggregate: groups_aggregate_bool_exp
  id: uuid_comparison_exp
  metadata: jsonb_comparison_exp
  owner: users_bool_exp
  ownerId: uuid_comparison_exp
  subscriptions: subscriptions_bool_exp
  subscriptions_aggregate: subscriptions_aggregate_bool_exp
  tags: String_array_comparison_exp
  updatedAt: timestamptz_comparison_exp
  updatedBy: uuid_comparison_exp
  users: user_org_roles_bool_exp
  users_aggregate: user_org_roles_aggregate_bool_exp
}

"""
unique or primary key constraints on table "organizations"
"""
enum organizations_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  organizations_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input organizations_delete_at_path_input {
  metadata: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input organizations_delete_elem_input {
  metadata: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input organizations_delete_key_input {
  metadata: String
}

"""
input type for inserting data into table "organizations"
"""
input organizations_insert_input {
  allowedEmailDomains: [String!]
  allowedEmails: [String!]
  autoEnroll: Boolean
  blockedEmailDomains: [String!]
  blockedEmails: [String!]
  description: String
  displayName: String
  groups: groups_arr_rel_insert_input
  metadata: jsonb
  tags: [String!]
  users: user_org_roles_arr_rel_insert_input
}

"""aggregate max on columns"""
type organizations_max_fields {
  allowedEmailDomains: [String!]
  allowedEmails: [String!]
  blockedEmailDomains: [String!]
  blockedEmails: [String!]
  createdAt: timestamptz
  createdBy: uuid
  description: String
  displayName: String
  id: uuid
  ownerId: uuid
  tags: [String!]
  updatedAt: timestamptz
  updatedBy: uuid
}

"""aggregate min on columns"""
type organizations_min_fields {
  allowedEmailDomains: [String!]
  allowedEmails: [String!]
  blockedEmailDomains: [String!]
  blockedEmails: [String!]
  createdAt: timestamptz
  createdBy: uuid
  description: String
  displayName: String
  id: uuid
  ownerId: uuid
  tags: [String!]
  updatedAt: timestamptz
  updatedBy: uuid
}

"""
response of any mutation on the table "organizations"
"""
type organizations_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [organizations!]!
}

"""
input type for inserting object relation for remote table "organizations"
"""
input organizations_obj_rel_insert_input {
  data: organizations_insert_input!

  """upsert condition"""
  on_conflict: organizations_on_conflict
}

"""
on_conflict condition type for table "organizations"
"""
input organizations_on_conflict {
  constraint: organizations_constraint!
  update_columns: [organizations_update_column!]! = []
  where: organizations_bool_exp
}

"""Ordering options when selecting data from "organizations"."""
input organizations_order_by {
  allowedEmailDomains: order_by
  allowedEmails: order_by
  autoEnroll: order_by
  blockedEmailDomains: order_by
  blockedEmails: order_by
  createdAt: order_by
  createdBy: order_by
  description: order_by
  displayName: order_by
  groups_aggregate: groups_aggregate_order_by
  id: order_by
  metadata: order_by
  owner: users_order_by
  ownerId: order_by
  subscriptions_aggregate: subscriptions_aggregate_order_by
  tags: order_by
  updatedAt: order_by
  updatedBy: order_by
  users_aggregate: user_org_roles_aggregate_order_by
}

"""primary key columns input for table: organizations"""
input organizations_pk_columns_input {
  id: uuid!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input organizations_prepend_input {
  metadata: jsonb
}

"""
select columns of table "organizations"
"""
enum organizations_select_column {
  """column name"""
  allowedEmailDomains

  """column name"""
  allowedEmails

  """column name"""
  autoEnroll

  """column name"""
  blockedEmailDomains

  """column name"""
  blockedEmails

  """column name"""
  createdAt

  """column name"""
  createdBy

  """column name"""
  description

  """column name"""
  displayName

  """column name"""
  id

  """column name"""
  metadata

  """column name"""
  ownerId

  """column name"""
  tags

  """column name"""
  updatedAt

  """column name"""
  updatedBy
}

"""
input type for updating data in table "organizations"
"""
input organizations_set_input {
  allowedEmailDomains: [String!]
  allowedEmails: [String!]
  autoEnroll: Boolean
  blockedEmailDomains: [String!]
  blockedEmails: [String!]
  description: String
  displayName: String
  metadata: jsonb
  ownerId: uuid
  tags: [String!]
}

"""
Streaming cursor of the table "organizations"
"""
input organizations_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: organizations_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input organizations_stream_cursor_value_input {
  allowedEmailDomains: [String!]
  allowedEmails: [String!]
  autoEnroll: Boolean
  blockedEmailDomains: [String!]
  blockedEmails: [String!]
  createdAt: timestamptz
  createdBy: uuid
  description: String
  displayName: String
  id: uuid
  metadata: jsonb
  ownerId: uuid
  tags: [String!]
  updatedAt: timestamptz
  updatedBy: uuid
}

"""
update columns of table "organizations"
"""
enum organizations_update_column {
  """column name"""
  allowedEmailDomains

  """column name"""
  allowedEmails

  """column name"""
  autoEnroll

  """column name"""
  blockedEmailDomains

  """column name"""
  blockedEmails

  """column name"""
  description

  """column name"""
  displayName

  """column name"""
  metadata

  """column name"""
  ownerId

  """column name"""
  tags
}

input organizations_updates {
  """append existing jsonb value of filtered columns with new jsonb value"""
  _append: organizations_append_input

  """
  delete the field or element with specified path (for JSON arrays, negative integers count from the end)
  """
  _delete_at_path: organizations_delete_at_path_input

  """
  delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
  """
  _delete_elem: organizations_delete_elem_input

  """
  delete key/value pair or string element. key/value pairs are matched based on their key value
  """
  _delete_key: organizations_delete_key_input

  """prepend existing jsonb value of filtered columns with new jsonb value"""
  _prepend: organizations_prepend_input

  """sets the columns of the filtered rows to the given values"""
  _set: organizations_set_input

  """filter the rows which have to be updated"""
  where: organizations_bool_exp!
}

"""plan enum"""
type plan {
  description: String!
  value: String!
}

"""
Boolean expression to filter rows from the table "plan". All fields are combined with a logical 'AND'.
"""
input plan_bool_exp {
  _and: [plan_bool_exp!]
  _not: plan_bool_exp
  _or: [plan_bool_exp!]
  description: String_comparison_exp
  value: String_comparison_exp
}

enum plan_enum {
  """Enterprise"""
  enterprise

  """Pro"""
  pro

  """Starter"""
  starter
}

"""
Boolean expression to compare columns of type "plan_enum". All fields are combined with logical 'AND'.
"""
input plan_enum_comparison_exp {
  _eq: plan_enum
  _in: [plan_enum!]
  _is_null: Boolean
  _neq: plan_enum
  _nin: [plan_enum!]
}

"""Ordering options when selecting data from "plan"."""
input plan_order_by {
  description: order_by
  value: order_by
}

"""
select columns of table "plan"
"""
enum plan_select_column {
  """column name"""
  description

  """column name"""
  value
}

"""
Streaming cursor of the table "plan"
"""
input plan_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: plan_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input plan_stream_cursor_value_input {
  description: String
  value: String
}

"""Joint table associating subjects polymorphically with rules"""
type policies {
  active: Boolean!
  createdAt: timestamptz!
  createdBy: uuid!
  id: uuid!
  orgId: uuid!

  """An object relationship"""
  organization: organizations!

  """An object relationship"""
  rule: rules!
  ruleId: uuid!
  subjectDisplayName: String!
  subjectId: uuid!
  subjectSecondaryId: String!
  subjectType: subject_type_enum!
  updatedAt: timestamptz!
  updatedBy: uuid!
  validFrom: timestamptz!
  validTo: timestamptz
  weight: smallint!
}

"""
aggregated selection of "policies"
"""
type policies_aggregate {
  aggregate: policies_aggregate_fields
  nodes: [policies!]!
}

"""
aggregate fields of "policies"
"""
type policies_aggregate_fields {
  avg: policies_avg_fields
  count(columns: [policies_select_column!], distinct: Boolean): Int!
  max: policies_max_fields
  min: policies_min_fields
  stddev: policies_stddev_fields
  stddev_pop: policies_stddev_pop_fields
  stddev_samp: policies_stddev_samp_fields
  sum: policies_sum_fields
  var_pop: policies_var_pop_fields
  var_samp: policies_var_samp_fields
  variance: policies_variance_fields
}

"""aggregate avg on columns"""
type policies_avg_fields {
  weight: Float
}

"""
Boolean expression to filter rows from the table "policies". All fields are combined with a logical 'AND'.
"""
input policies_bool_exp {
  _and: [policies_bool_exp!]
  _not: policies_bool_exp
  _or: [policies_bool_exp!]
  active: Boolean_comparison_exp
  createdAt: timestamptz_comparison_exp
  createdBy: uuid_comparison_exp
  id: uuid_comparison_exp
  orgId: uuid_comparison_exp
  organization: organizations_bool_exp
  rule: rules_bool_exp
  ruleId: uuid_comparison_exp
  subjectDisplayName: String_comparison_exp
  subjectId: uuid_comparison_exp
  subjectSecondaryId: String_comparison_exp
  subjectType: subject_type_enum_comparison_exp
  updatedAt: timestamptz_comparison_exp
  updatedBy: uuid_comparison_exp
  validFrom: timestamptz_comparison_exp
  validTo: timestamptz_comparison_exp
  weight: smallint_comparison_exp
}

"""
unique or primary key constraints on table "policies"
"""
enum policies_constraint {
  """
  unique or primary key constraint on columns "subject_id", "rule_id", "subject_type", "org_id"
  """
  policies_org_id_rule_id_subject_id_subject_type_key

  """
  unique or primary key constraint on columns "id"
  """
  policies_pkey
}

"""
input type for incrementing numeric columns in table "policies"
"""
input policies_inc_input {
  weight: smallint
}

"""
input type for inserting data into table "policies"
"""
input policies_insert_input {
  active: Boolean
  organization: organizations_obj_rel_insert_input
  rule: rules_obj_rel_insert_input
  ruleId: uuid
  subjectDisplayName: String
  subjectId: uuid
  subjectSecondaryId: String
  subjectType: subject_type_enum
  validFrom: timestamptz
  validTo: timestamptz
  weight: smallint
}

"""aggregate max on columns"""
type policies_max_fields {
  createdAt: timestamptz
  createdBy: uuid
  id: uuid
  orgId: uuid
  ruleId: uuid
  subjectDisplayName: String
  subjectId: uuid
  subjectSecondaryId: String
  updatedAt: timestamptz
  updatedBy: uuid
  validFrom: timestamptz
  validTo: timestamptz
  weight: smallint
}

"""aggregate min on columns"""
type policies_min_fields {
  createdAt: timestamptz
  createdBy: uuid
  id: uuid
  orgId: uuid
  ruleId: uuid
  subjectDisplayName: String
  subjectId: uuid
  subjectSecondaryId: String
  updatedAt: timestamptz
  updatedBy: uuid
  validFrom: timestamptz
  validTo: timestamptz
  weight: smallint
}

"""
response of any mutation on the table "policies"
"""
type policies_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [policies!]!
}

"""
on_conflict condition type for table "policies"
"""
input policies_on_conflict {
  constraint: policies_constraint!
  update_columns: [policies_update_column!]! = []
  where: policies_bool_exp
}

"""Ordering options when selecting data from "policies"."""
input policies_order_by {
  active: order_by
  createdAt: order_by
  createdBy: order_by
  id: order_by
  orgId: order_by
  organization: organizations_order_by
  rule: rules_order_by
  ruleId: order_by
  subjectDisplayName: order_by
  subjectId: order_by
  subjectSecondaryId: order_by
  subjectType: order_by
  updatedAt: order_by
  updatedBy: order_by
  validFrom: order_by
  validTo: order_by
  weight: order_by
}

"""primary key columns input for table: policies"""
input policies_pk_columns_input {
  id: uuid!
}

"""
select columns of table "policies"
"""
enum policies_select_column {
  """column name"""
  active

  """column name"""
  createdAt

  """column name"""
  createdBy

  """column name"""
  id

  """column name"""
  orgId

  """column name"""
  ruleId

  """column name"""
  subjectDisplayName

  """column name"""
  subjectId

  """column name"""
  subjectSecondaryId

  """column name"""
  subjectType

  """column name"""
  updatedAt

  """column name"""
  updatedBy

  """column name"""
  validFrom

  """column name"""
  validTo

  """column name"""
  weight
}

"""
input type for updating data in table "policies"
"""
input policies_set_input {
  active: Boolean
  validFrom: timestamptz
  validTo: timestamptz
  weight: smallint
}

"""aggregate stddev on columns"""
type policies_stddev_fields {
  weight: Float
}

"""aggregate stddev_pop on columns"""
type policies_stddev_pop_fields {
  weight: Float
}

"""aggregate stddev_samp on columns"""
type policies_stddev_samp_fields {
  weight: Float
}

"""
Streaming cursor of the table "policies"
"""
input policies_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: policies_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input policies_stream_cursor_value_input {
  active: Boolean
  createdAt: timestamptz
  createdBy: uuid
  id: uuid
  orgId: uuid
  ruleId: uuid
  subjectDisplayName: String
  subjectId: uuid
  subjectSecondaryId: String
  subjectType: subject_type_enum
  updatedAt: timestamptz
  updatedBy: uuid
  validFrom: timestamptz
  validTo: timestamptz
  weight: smallint
}

"""aggregate sum on columns"""
type policies_sum_fields {
  weight: smallint
}

"""
update columns of table "policies"
"""
enum policies_update_column {
  """column name"""
  active

  """column name"""
  validFrom

  """column name"""
  validTo

  """column name"""
  weight
}

input policies_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: policies_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: policies_set_input

  """filter the rows which have to be updated"""
  where: policies_bool_exp!
}

"""aggregate var_pop on columns"""
type policies_var_pop_fields {
  weight: Float
}

"""aggregate var_samp on columns"""
type policies_var_samp_fields {
  weight: Float
}

"""aggregate variance on columns"""
type policies_variance_fields {
  weight: Float
}

"""Table containing device pools data"""
type pools {
  alternateDns: Boolean
  createdAt: timestamptz!
  createdBy: uuid!
  description: String
  displayName: String!
  id: uuid!
  metadata(
    """JSON select path"""
    path: String
  ): jsonb
  orgId: uuid!
  proxyIp: Boolean
  tags: [String!]
  updatedAt: timestamptz!
  updatedBy: uuid!
  version: String
}

type pools_aggregate {
  aggregate: pools_aggregate_fields
  nodes: [pools!]!
}

"""
aggregate fields of "pools"
"""
type pools_aggregate_fields {
  count(columns: [pools_select_column!], distinct: Boolean): Int!
  max: pools_max_fields
  min: pools_min_fields
}

"""
order by aggregate values of table "pools"
"""
input pools_aggregate_order_by {
  count: order_by
  max: pools_max_order_by
  min: pools_min_order_by
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input pools_append_input {
  metadata: jsonb
}

"""
Boolean expression to filter rows from the table "pools". All fields are combined with a logical 'AND'.
"""
input pools_bool_exp {
  _and: [pools_bool_exp!]
  _not: pools_bool_exp
  _or: [pools_bool_exp!]
  alternateDns: Boolean_comparison_exp
  createdAt: timestamptz_comparison_exp
  createdBy: uuid_comparison_exp
  description: String_comparison_exp
  displayName: String_comparison_exp
  id: uuid_comparison_exp
  metadata: jsonb_comparison_exp
  orgId: uuid_comparison_exp
  proxyIp: Boolean_comparison_exp
  tags: String_array_comparison_exp
  updatedAt: timestamptz_comparison_exp
  updatedBy: uuid_comparison_exp
  version: String_comparison_exp
}

"""
unique or primary key constraints on table "pools"
"""
enum pools_constraint {
  """
  unique or primary key constraint on columns "display_name", "org_id"
  """
  pools_org_id_display_name_key

  """
  unique or primary key constraint on columns "id"
  """
  pools_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input pools_delete_at_path_input {
  metadata: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input pools_delete_elem_input {
  metadata: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input pools_delete_key_input {
  metadata: String
}

"""
input type for inserting data into table "pools"
"""
input pools_insert_input {
  alternateDns: Boolean
  description: String
  displayName: String
  metadata: jsonb
  proxyIp: Boolean
  tags: [String!]
  version: String
}

"""aggregate max on columns"""
type pools_max_fields {
  createdAt: timestamptz
  createdBy: uuid
  description: String
  displayName: String
  id: uuid
  orgId: uuid
  tags: [String!]
  updatedAt: timestamptz
  updatedBy: uuid
  version: String
}

"""
order by max() on columns of table "pools"
"""
input pools_max_order_by {
  createdAt: order_by
  createdBy: order_by
  description: order_by
  displayName: order_by
  id: order_by
  orgId: order_by
  tags: order_by
  updatedAt: order_by
  updatedBy: order_by
  version: order_by
}

"""aggregate min on columns"""
type pools_min_fields {
  createdAt: timestamptz
  createdBy: uuid
  description: String
  displayName: String
  id: uuid
  orgId: uuid
  tags: [String!]
  updatedAt: timestamptz
  updatedBy: uuid
  version: String
}

"""
order by min() on columns of table "pools"
"""
input pools_min_order_by {
  createdAt: order_by
  createdBy: order_by
  description: order_by
  displayName: order_by
  id: order_by
  orgId: order_by
  tags: order_by
  updatedAt: order_by
  updatedBy: order_by
  version: order_by
}

"""
response of any mutation on the table "pools"
"""
type pools_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [pools!]!
}

"""
input type for inserting object relation for remote table "pools"
"""
input pools_obj_rel_insert_input {
  data: pools_insert_input!

  """upsert condition"""
  on_conflict: pools_on_conflict
}

"""
on_conflict condition type for table "pools"
"""
input pools_on_conflict {
  constraint: pools_constraint!
  update_columns: [pools_update_column!]! = []
  where: pools_bool_exp
}

"""Ordering options when selecting data from "pools"."""
input pools_order_by {
  alternateDns: order_by
  createdAt: order_by
  createdBy: order_by
  description: order_by
  displayName: order_by
  id: order_by
  metadata: order_by
  orgId: order_by
  proxyIp: order_by
  tags: order_by
  updatedAt: order_by
  updatedBy: order_by
  version: order_by
}

"""primary key columns input for table: pools"""
input pools_pk_columns_input {
  id: uuid!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input pools_prepend_input {
  metadata: jsonb
}

"""
select columns of table "pools"
"""
enum pools_select_column {
  """column name"""
  alternateDns

  """column name"""
  createdAt

  """column name"""
  createdBy

  """column name"""
  description

  """column name"""
  displayName

  """column name"""
  id

  """column name"""
  metadata

  """column name"""
  orgId

  """column name"""
  proxyIp

  """column name"""
  tags

  """column name"""
  updatedAt

  """column name"""
  updatedBy

  """column name"""
  version
}

"""
input type for updating data in table "pools"
"""
input pools_set_input {
  alternateDns: Boolean
  description: String
  displayName: String
  metadata: jsonb
  proxyIp: Boolean
  tags: [String!]
  version: String
}

"""
Streaming cursor of the table "pools"
"""
input pools_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: pools_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input pools_stream_cursor_value_input {
  alternateDns: Boolean
  createdAt: timestamptz
  createdBy: uuid
  description: String
  displayName: String
  id: uuid
  metadata: jsonb
  orgId: uuid
  proxyIp: Boolean
  tags: [String!]
  updatedAt: timestamptz
  updatedBy: uuid
  version: String
}

"""
update columns of table "pools"
"""
enum pools_update_column {
  """column name"""
  alternateDns

  """column name"""
  description

  """column name"""
  displayName

  """column name"""
  metadata

  """column name"""
  proxyIp

  """column name"""
  tags

  """column name"""
  version
}

input pools_updates {
  """append existing jsonb value of filtered columns with new jsonb value"""
  _append: pools_append_input

  """
  delete the field or element with specified path (for JSON arrays, negative integers count from the end)
  """
  _delete_at_path: pools_delete_at_path_input

  """
  delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
  """
  _delete_elem: pools_delete_elem_input

  """
  delete key/value pair or string element. key/value pairs are matched based on their key value
  """
  _delete_key: pools_delete_key_input

  """prepend existing jsonb value of filtered columns with new jsonb value"""
  _prepend: pools_prepend_input

  """sets the columns of the filtered rows to the given values"""
  _set: pools_set_input

  """filter the rows which have to be updated"""
  where: pools_bool_exp!
}

"""policy network protocol enum"""
type protocol {
  description: String!
  value: String!
}

"""
Boolean expression to filter rows from the table "protocol". All fields are combined with a logical 'AND'.
"""
input protocol_bool_exp {
  _and: [protocol_bool_exp!]
  _not: protocol_bool_exp
  _or: [protocol_bool_exp!]
  description: String_comparison_exp
  value: String_comparison_exp
}

enum protocol_enum {
  """Any"""
  Any

  """ICMP"""
  ICMP

  """ICMPV6"""
  ICMPV6

  """IGMP"""
  IGMP

  """IP"""
  IP

  """IPV6"""
  IPV6

  """RM"""
  RM

  """TCP"""
  TCP

  """UDP"""
  UDP
}

"""
Boolean expression to compare columns of type "protocol_enum". All fields are combined with logical 'AND'.
"""
input protocol_enum_comparison_exp {
  _eq: protocol_enum
  _in: [protocol_enum!]
  _is_null: Boolean
  _neq: protocol_enum
  _nin: [protocol_enum!]
}

"""Ordering options when selecting data from "protocol"."""
input protocol_order_by {
  description: order_by
  value: order_by
}

"""
select columns of table "protocol"
"""
enum protocol_select_column {
  """column name"""
  description

  """column name"""
  value
}

"""
Streaming cursor of the table "protocol"
"""
input protocol_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: protocol_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input protocol_stream_cursor_value_input {
  description: String
  value: String
}

type query_root {
  """Universities API"""
  ListUniversities(arg1: ListUniversitiesInput!): [ListUniversitiesOutput]

  """Restrooms API"""
  SearchRestrooms(arg1: SearchRestroomsInput!): [SearchRestroomsOutput]

  """
  fetch data from the table: "action"
  """
  action(
    """distinct select on columns"""
    distinct_on: [action_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [action_order_by!]

    """filter the rows returned"""
    where: action_bool_exp
  ): [action!]!

  """fetch data from the table: "action" using primary key columns"""
  action_by_pk(value: String!): action

  """
  fetch data from the table: "auth.refresh_tokens" using primary key columns
  """
  authRefreshToken(id: uuid!): authRefreshTokens

  """
  fetch data from the table: "auth.refresh_tokens"
  """
  authRefreshTokens(
    """distinct select on columns"""
    distinct_on: [authRefreshTokens_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [authRefreshTokens_order_by!]

    """filter the rows returned"""
    where: authRefreshTokens_bool_exp
  ): [authRefreshTokens!]!

  """
  fetch aggregated fields from the table: "auth.refresh_tokens"
  """
  authRefreshTokensAggregate(
    """distinct select on columns"""
    distinct_on: [authRefreshTokens_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [authRefreshTokens_order_by!]

    """filter the rows returned"""
    where: authRefreshTokens_bool_exp
  ): authRefreshTokens_aggregate!

  """
  fetch data from the table: "auth.user_providers" using primary key columns
  """
  authUserProvider(id: uuid!): authUserProviders

  """
  fetch data from the table: "auth.user_providers"
  """
  authUserProviders(
    """distinct select on columns"""
    distinct_on: [authUserProviders_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [authUserProviders_order_by!]

    """filter the rows returned"""
    where: authUserProviders_bool_exp
  ): [authUserProviders!]!

  """
  fetch aggregated fields from the table: "auth.user_providers"
  """
  authUserProvidersAggregate(
    """distinct select on columns"""
    distinct_on: [authUserProviders_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [authUserProviders_order_by!]

    """filter the rows returned"""
    where: authUserProviders_bool_exp
  ): authUserProviders_aggregate!

  """fetch data from the table: "auth.user_roles" using primary key columns"""
  authUserRole(id: uuid!): authUserRoles

  """
  fetch data from the table: "auth.user_roles"
  """
  authUserRoles(
    """distinct select on columns"""
    distinct_on: [authUserRoles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [authUserRoles_order_by!]

    """filter the rows returned"""
    where: authUserRoles_bool_exp
  ): [authUserRoles!]!

  """
  fetch aggregated fields from the table: "auth.user_roles"
  """
  authUserRolesAggregate(
    """distinct select on columns"""
    distinct_on: [authUserRoles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [authUserRoles_order_by!]

    """filter the rows returned"""
    where: authUserRoles_bool_exp
  ): authUserRoles_aggregate!

  """
  fetch data from the table: "auth.user_security_keys" using primary key columns
  """
  authUserSecurityKey(id: uuid!): authUserSecurityKeys

  """
  fetch data from the table: "auth.user_security_keys"
  """
  authUserSecurityKeys(
    """distinct select on columns"""
    distinct_on: [authUserSecurityKeys_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [authUserSecurityKeys_order_by!]

    """filter the rows returned"""
    where: authUserSecurityKeys_bool_exp
  ): [authUserSecurityKeys!]!

  """
  fetch aggregated fields from the table: "auth.user_security_keys"
  """
  authUserSecurityKeysAggregate(
    """distinct select on columns"""
    distinct_on: [authUserSecurityKeys_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [authUserSecurityKeys_order_by!]

    """filter the rows returned"""
    where: authUserSecurityKeys_bool_exp
  ): authUserSecurityKeys_aggregate!

  """
  execute function "device_associated_pools" which returns "pools"
  """
  device_associated_pools(
    """
    input parameters for function "device_associated_pools"
    """
    args: device_associated_pools_args!

    """distinct select on columns"""
    distinct_on: [pools_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pools_order_by!]

    """filter the rows returned"""
    where: pools_bool_exp
  ): [pools!]!

  """
  execute function "device_associated_pools" and query aggregates on result of table type "pools"
  """
  device_associated_pools_aggregate(
    """
    input parameters for function "device_associated_pools_aggregate"
    """
    args: device_associated_pools_args!

    """distinct select on columns"""
    distinct_on: [pools_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pools_order_by!]

    """filter the rows returned"""
    where: pools_bool_exp
  ): pools_aggregate!

  """
  execute function "device_dissociated_pools" which returns "pools"
  """
  device_dissociated_pools(
    """
    input parameters for function "device_dissociated_pools"
    """
    args: device_dissociated_pools_args!

    """distinct select on columns"""
    distinct_on: [pools_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pools_order_by!]

    """filter the rows returned"""
    where: pools_bool_exp
  ): [pools!]!

  """
  execute function "device_dissociated_pools" and query aggregates on result of table type "pools"
  """
  device_dissociated_pools_aggregate(
    """
    input parameters for function "device_dissociated_pools_aggregate"
    """
    args: device_dissociated_pools_args!

    """distinct select on columns"""
    distinct_on: [pools_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pools_order_by!]

    """filter the rows returned"""
    where: pools_bool_exp
  ): pools_aggregate!

  """
  fetch data from the table: "device_pools"
  """
  device_pools(
    """distinct select on columns"""
    distinct_on: [device_pools_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [device_pools_order_by!]

    """filter the rows returned"""
    where: device_pools_bool_exp
  ): [device_pools!]!

  """
  fetch aggregated fields from the table: "device_pools"
  """
  device_pools_aggregate(
    """distinct select on columns"""
    distinct_on: [device_pools_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [device_pools_order_by!]

    """filter the rows returned"""
    where: device_pools_bool_exp
  ): device_pools_aggregate!

  """fetch data from the table: "device_pools" using primary key columns"""
  device_pools_by_pk(deviceId: uuid!, poolId: uuid!): device_pools

  """
  fetch data from the table: "devices"
  """
  devices(
    """distinct select on columns"""
    distinct_on: [devices_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [devices_order_by!]

    """filter the rows returned"""
    where: devices_bool_exp
  ): [devices!]!

  """
  fetch aggregated fields from the table: "devices"
  """
  devices_aggregate(
    """distinct select on columns"""
    distinct_on: [devices_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [devices_order_by!]

    """filter the rows returned"""
    where: devices_bool_exp
  ): devices_aggregate!

  """fetch data from the table: "devices" using primary key columns"""
  devices_by_pk(id: uuid!): devices

  """
  fetch data from the table: "direction"
  """
  direction(
    """distinct select on columns"""
    distinct_on: [direction_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [direction_order_by!]

    """filter the rows returned"""
    where: direction_bool_exp
  ): [direction!]!

  """fetch data from the table: "direction" using primary key columns"""
  direction_by_pk(value: String!): direction

  """An array relationship"""
  groups(
    """distinct select on columns"""
    distinct_on: [groups_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [groups_order_by!]

    """filter the rows returned"""
    where: groups_bool_exp
  ): [groups!]!

  """An aggregate relationship"""
  groups_aggregate(
    """distinct select on columns"""
    distinct_on: [groups_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [groups_order_by!]

    """filter the rows returned"""
    where: groups_bool_exp
  ): groups_aggregate!

  """fetch data from the table: "groups" using primary key columns"""
  groups_by_pk(id: uuid!): groups

  """
  fetch data from the table: "organizations"
  """
  organizations(
    """distinct select on columns"""
    distinct_on: [organizations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [organizations_order_by!]

    """filter the rows returned"""
    where: organizations_bool_exp
  ): [organizations!]!

  """
  fetch aggregated fields from the table: "organizations"
  """
  organizations_aggregate(
    """distinct select on columns"""
    distinct_on: [organizations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [organizations_order_by!]

    """filter the rows returned"""
    where: organizations_bool_exp
  ): organizations_aggregate!

  """fetch data from the table: "organizations" using primary key columns"""
  organizations_by_pk(id: uuid!): organizations

  """
  fetch data from the table: "plan"
  """
  plan(
    """distinct select on columns"""
    distinct_on: [plan_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [plan_order_by!]

    """filter the rows returned"""
    where: plan_bool_exp
  ): [plan!]!

  """fetch data from the table: "plan" using primary key columns"""
  plan_by_pk(value: String!): plan

  """
  fetch data from the table: "policies"
  """
  policies(
    """distinct select on columns"""
    distinct_on: [policies_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [policies_order_by!]

    """filter the rows returned"""
    where: policies_bool_exp
  ): [policies!]!

  """
  fetch aggregated fields from the table: "policies"
  """
  policies_aggregate(
    """distinct select on columns"""
    distinct_on: [policies_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [policies_order_by!]

    """filter the rows returned"""
    where: policies_bool_exp
  ): policies_aggregate!

  """fetch data from the table: "policies" using primary key columns"""
  policies_by_pk(id: uuid!): policies

  """
  fetch data from the table: "pools"
  """
  pools(
    """distinct select on columns"""
    distinct_on: [pools_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pools_order_by!]

    """filter the rows returned"""
    where: pools_bool_exp
  ): [pools!]!

  """
  fetch aggregated fields from the table: "pools"
  """
  pools_aggregate(
    """distinct select on columns"""
    distinct_on: [pools_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pools_order_by!]

    """filter the rows returned"""
    where: pools_bool_exp
  ): pools_aggregate!

  """fetch data from the table: "pools" using primary key columns"""
  pools_by_pk(id: uuid!): pools

  """
  fetch data from the table: "protocol"
  """
  protocol(
    """distinct select on columns"""
    distinct_on: [protocol_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [protocol_order_by!]

    """filter the rows returned"""
    where: protocol_bool_exp
  ): [protocol!]!

  """fetch data from the table: "protocol" using primary key columns"""
  protocol_by_pk(value: String!): protocol

  """
  fetch data from the table: "rules"
  """
  rules(
    """distinct select on columns"""
    distinct_on: [rules_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [rules_order_by!]

    """filter the rows returned"""
    where: rules_bool_exp
  ): [rules!]!

  """
  fetch aggregated fields from the table: "rules"
  """
  rules_aggregate(
    """distinct select on columns"""
    distinct_on: [rules_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [rules_order_by!]

    """filter the rows returned"""
    where: rules_bool_exp
  ): rules_aggregate!

  """fetch data from the table: "rules" using primary key columns"""
  rules_by_pk(id: uuid!): rules

  """
  fetch data from the table: "status"
  """
  status(
    """distinct select on columns"""
    distinct_on: [status_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [status_order_by!]

    """filter the rows returned"""
    where: status_bool_exp
  ): [status!]!

  """fetch data from the table: "status" using primary key columns"""
  status_by_pk(value: String!): status

  """
  fetch data from the table: "subject_type"
  """
  subject_type(
    """distinct select on columns"""
    distinct_on: [subject_type_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [subject_type_order_by!]

    """filter the rows returned"""
    where: subject_type_bool_exp
  ): [subject_type!]!

  """fetch data from the table: "subject_type" using primary key columns"""
  subject_type_by_pk(value: String!): subject_type

  """An array relationship"""
  subscriptions(
    """distinct select on columns"""
    distinct_on: [subscriptions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [subscriptions_order_by!]

    """filter the rows returned"""
    where: subscriptions_bool_exp
  ): [subscriptions!]!

  """An aggregate relationship"""
  subscriptions_aggregate(
    """distinct select on columns"""
    distinct_on: [subscriptions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [subscriptions_order_by!]

    """filter the rows returned"""
    where: subscriptions_bool_exp
  ): subscriptions_aggregate!

  """fetch data from the table: "subscriptions" using primary key columns"""
  subscriptions_by_pk(id: uuid!): subscriptions

  """fetch data from the table: "auth.users" using primary key columns"""
  user(id: uuid!): users

  """
  execute function "user_associated_groups" which returns "groups"
  """
  user_associated_groups(
    """
    input parameters for function "user_associated_groups"
    """
    args: user_associated_groups_args!

    """distinct select on columns"""
    distinct_on: [groups_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [groups_order_by!]

    """filter the rows returned"""
    where: groups_bool_exp
  ): [groups!]!

  """
  execute function "user_associated_groups" and query aggregates on result of table type "groups"
  """
  user_associated_groups_aggregate(
    """
    input parameters for function "user_associated_groups_aggregate"
    """
    args: user_associated_groups_args!

    """distinct select on columns"""
    distinct_on: [groups_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [groups_order_by!]

    """filter the rows returned"""
    where: groups_bool_exp
  ): groups_aggregate!

  """
  execute function "user_dissociated_groups" which returns "groups"
  """
  user_dissociated_groups(
    """
    input parameters for function "user_dissociated_groups"
    """
    args: user_dissociated_groups_args!

    """distinct select on columns"""
    distinct_on: [groups_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [groups_order_by!]

    """filter the rows returned"""
    where: groups_bool_exp
  ): [groups!]!

  """
  execute function "user_dissociated_groups" and query aggregates on result of table type "groups"
  """
  user_dissociated_groups_aggregate(
    """
    input parameters for function "user_dissociated_groups_aggregate"
    """
    args: user_dissociated_groups_args!

    """distinct select on columns"""
    distinct_on: [groups_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [groups_order_by!]

    """filter the rows returned"""
    where: groups_bool_exp
  ): groups_aggregate!

  """
  fetch data from the table: "user_groups"
  """
  user_groups(
    """distinct select on columns"""
    distinct_on: [user_groups_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_groups_order_by!]

    """filter the rows returned"""
    where: user_groups_bool_exp
  ): [user_groups!]!

  """
  fetch aggregated fields from the table: "user_groups"
  """
  user_groups_aggregate(
    """distinct select on columns"""
    distinct_on: [user_groups_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_groups_order_by!]

    """filter the rows returned"""
    where: user_groups_bool_exp
  ): user_groups_aggregate!

  """fetch data from the table: "user_groups" using primary key columns"""
  user_groups_by_pk(groupId: uuid!, userId: uuid!): user_groups

  """
  fetch data from the table: "user_org_roles"
  """
  user_org_roles(
    """distinct select on columns"""
    distinct_on: [user_org_roles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_org_roles_order_by!]

    """filter the rows returned"""
    where: user_org_roles_bool_exp
  ): [user_org_roles!]!

  """
  fetch aggregated fields from the table: "user_org_roles"
  """
  user_org_roles_aggregate(
    """distinct select on columns"""
    distinct_on: [user_org_roles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_org_roles_order_by!]

    """filter the rows returned"""
    where: user_org_roles_bool_exp
  ): user_org_roles_aggregate!

  """fetch data from the table: "user_org_roles" using primary key columns"""
  user_org_roles_by_pk(orgId: uuid!, userId: uuid!): user_org_roles

  """
  fetch data from the table: "auth.users"
  """
  users(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): [users!]!

  """
  fetch aggregated fields from the table: "auth.users"
  """
  usersAggregate(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): users_aggregate!
}

"""Table containing shared or single-use 5-tuple firewalls rules"""
type rules {
  action: action_enum!
  appId: String
  createdAt: timestamptz!
  createdBy: uuid!
  description: String
  destination: String
  destinationPort: String
  direction: direction_enum!
  displayName: String!
  id: uuid!
  metadata(
    """JSON select path"""
    path: String
  ): jsonb
  orgId: uuid!
  protocol: protocol_enum!
  shared: Boolean!
  source: String
  sourcePort: String
  tags: [String!]
  throttleRate: String
  updatedAt: timestamptz!
  updatedBy: uuid!
  weight: smallint!
}

"""
aggregated selection of "rules"
"""
type rules_aggregate {
  aggregate: rules_aggregate_fields
  nodes: [rules!]!
}

"""
aggregate fields of "rules"
"""
type rules_aggregate_fields {
  avg: rules_avg_fields
  count(columns: [rules_select_column!], distinct: Boolean): Int!
  max: rules_max_fields
  min: rules_min_fields
  stddev: rules_stddev_fields
  stddev_pop: rules_stddev_pop_fields
  stddev_samp: rules_stddev_samp_fields
  sum: rules_sum_fields
  var_pop: rules_var_pop_fields
  var_samp: rules_var_samp_fields
  variance: rules_variance_fields
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input rules_append_input {
  metadata: jsonb
}

"""aggregate avg on columns"""
type rules_avg_fields {
  weight: Float
}

"""
Boolean expression to filter rows from the table "rules". All fields are combined with a logical 'AND'.
"""
input rules_bool_exp {
  _and: [rules_bool_exp!]
  _not: rules_bool_exp
  _or: [rules_bool_exp!]
  action: action_enum_comparison_exp
  appId: String_comparison_exp
  createdAt: timestamptz_comparison_exp
  createdBy: uuid_comparison_exp
  description: String_comparison_exp
  destination: String_comparison_exp
  destinationPort: String_comparison_exp
  direction: direction_enum_comparison_exp
  displayName: String_comparison_exp
  id: uuid_comparison_exp
  metadata: jsonb_comparison_exp
  orgId: uuid_comparison_exp
  protocol: protocol_enum_comparison_exp
  shared: Boolean_comparison_exp
  source: String_comparison_exp
  sourcePort: String_comparison_exp
  tags: String_array_comparison_exp
  throttleRate: String_comparison_exp
  updatedAt: timestamptz_comparison_exp
  updatedBy: uuid_comparison_exp
  weight: smallint_comparison_exp
}

"""
unique or primary key constraints on table "rules"
"""
enum rules_constraint {
  """
  unique or primary key constraint on columns "display_name", "org_id"
  """
  rules_org_id_display_name_key

  """
  unique or primary key constraint on columns "id"
  """
  rules_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input rules_delete_at_path_input {
  metadata: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input rules_delete_elem_input {
  metadata: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input rules_delete_key_input {
  metadata: String
}

"""
input type for incrementing numeric columns in table "rules"
"""
input rules_inc_input {
  weight: smallint
}

"""
input type for inserting data into table "rules"
"""
input rules_insert_input {
  action: action_enum
  appId: String
  description: String
  destination: String
  destinationPort: String
  direction: direction_enum
  displayName: String
  metadata: jsonb
  protocol: protocol_enum
  shared: Boolean
  source: String
  sourcePort: String
  tags: [String!]
  throttleRate: String
  weight: smallint
}

"""aggregate max on columns"""
type rules_max_fields {
  appId: String
  createdAt: timestamptz
  createdBy: uuid
  description: String
  destination: String
  destinationPort: String
  displayName: String
  id: uuid
  orgId: uuid
  source: String
  sourcePort: String
  tags: [String!]
  throttleRate: String
  updatedAt: timestamptz
  updatedBy: uuid
  weight: smallint
}

"""aggregate min on columns"""
type rules_min_fields {
  appId: String
  createdAt: timestamptz
  createdBy: uuid
  description: String
  destination: String
  destinationPort: String
  displayName: String
  id: uuid
  orgId: uuid
  source: String
  sourcePort: String
  tags: [String!]
  throttleRate: String
  updatedAt: timestamptz
  updatedBy: uuid
  weight: smallint
}

"""
response of any mutation on the table "rules"
"""
type rules_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [rules!]!
}

"""
input type for inserting object relation for remote table "rules"
"""
input rules_obj_rel_insert_input {
  data: rules_insert_input!

  """upsert condition"""
  on_conflict: rules_on_conflict
}

"""
on_conflict condition type for table "rules"
"""
input rules_on_conflict {
  constraint: rules_constraint!
  update_columns: [rules_update_column!]! = []
  where: rules_bool_exp
}

"""Ordering options when selecting data from "rules"."""
input rules_order_by {
  action: order_by
  appId: order_by
  createdAt: order_by
  createdBy: order_by
  description: order_by
  destination: order_by
  destinationPort: order_by
  direction: order_by
  displayName: order_by
  id: order_by
  metadata: order_by
  orgId: order_by
  protocol: order_by
  shared: order_by
  source: order_by
  sourcePort: order_by
  tags: order_by
  throttleRate: order_by
  updatedAt: order_by
  updatedBy: order_by
  weight: order_by
}

"""primary key columns input for table: rules"""
input rules_pk_columns_input {
  id: uuid!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input rules_prepend_input {
  metadata: jsonb
}

"""
select columns of table "rules"
"""
enum rules_select_column {
  """column name"""
  action

  """column name"""
  appId

  """column name"""
  createdAt

  """column name"""
  createdBy

  """column name"""
  description

  """column name"""
  destination

  """column name"""
  destinationPort

  """column name"""
  direction

  """column name"""
  displayName

  """column name"""
  id

  """column name"""
  metadata

  """column name"""
  orgId

  """column name"""
  protocol

  """column name"""
  shared

  """column name"""
  source

  """column name"""
  sourcePort

  """column name"""
  tags

  """column name"""
  throttleRate

  """column name"""
  updatedAt

  """column name"""
  updatedBy

  """column name"""
  weight
}

"""
input type for updating data in table "rules"
"""
input rules_set_input {
  action: action_enum
  appId: String
  description: String
  destination: String
  destinationPort: String
  direction: direction_enum
  displayName: String
  metadata: jsonb
  protocol: protocol_enum
  shared: Boolean
  source: String
  sourcePort: String
  tags: [String!]
  throttleRate: String
  weight: smallint
}

"""aggregate stddev on columns"""
type rules_stddev_fields {
  weight: Float
}

"""aggregate stddev_pop on columns"""
type rules_stddev_pop_fields {
  weight: Float
}

"""aggregate stddev_samp on columns"""
type rules_stddev_samp_fields {
  weight: Float
}

"""
Streaming cursor of the table "rules"
"""
input rules_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: rules_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input rules_stream_cursor_value_input {
  action: action_enum
  appId: String
  createdAt: timestamptz
  createdBy: uuid
  description: String
  destination: String
  destinationPort: String
  direction: direction_enum
  displayName: String
  id: uuid
  metadata: jsonb
  orgId: uuid
  protocol: protocol_enum
  shared: Boolean
  source: String
  sourcePort: String
  tags: [String!]
  throttleRate: String
  updatedAt: timestamptz
  updatedBy: uuid
  weight: smallint
}

"""aggregate sum on columns"""
type rules_sum_fields {
  weight: smallint
}

"""
update columns of table "rules"
"""
enum rules_update_column {
  """column name"""
  action

  """column name"""
  appId

  """column name"""
  description

  """column name"""
  destination

  """column name"""
  destinationPort

  """column name"""
  direction

  """column name"""
  displayName

  """column name"""
  metadata

  """column name"""
  protocol

  """column name"""
  shared

  """column name"""
  source

  """column name"""
  sourcePort

  """column name"""
  tags

  """column name"""
  throttleRate

  """column name"""
  weight
}

input rules_updates {
  """append existing jsonb value of filtered columns with new jsonb value"""
  _append: rules_append_input

  """
  delete the field or element with specified path (for JSON arrays, negative integers count from the end)
  """
  _delete_at_path: rules_delete_at_path_input

  """
  delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
  """
  _delete_elem: rules_delete_elem_input

  """
  delete key/value pair or string element. key/value pairs are matched based on their key value
  """
  _delete_key: rules_delete_key_input

  """increments the numeric columns with given value of the filtered values"""
  _inc: rules_inc_input

  """prepend existing jsonb value of filtered columns with new jsonb value"""
  _prepend: rules_prepend_input

  """sets the columns of the filtered rows to the given values"""
  _set: rules_set_input

  """filter the rows which have to be updated"""
  where: rules_bool_exp!
}

"""aggregate var_pop on columns"""
type rules_var_pop_fields {
  weight: Float
}

"""aggregate var_samp on columns"""
type rules_var_samp_fields {
  weight: Float
}

"""aggregate variance on columns"""
type rules_variance_fields {
  weight: Float
}

scalar smallint

"""
Boolean expression to compare columns of type "smallint". All fields are combined with logical 'AND'.
"""
input smallint_comparison_exp {
  _eq: smallint
  _gt: smallint
  _gte: smallint
  _in: [smallint!]
  _is_null: Boolean
  _lt: smallint
  _lte: smallint
  _neq: smallint
  _nin: [smallint!]
}

"""status enum"""
type status {
  description: String!
  value: String!
}

"""
Boolean expression to filter rows from the table "status". All fields are combined with a logical 'AND'.
"""
input status_bool_exp {
  _and: [status_bool_exp!]
  _not: status_bool_exp
  _or: [status_bool_exp!]
  description: String_comparison_exp
  value: String_comparison_exp
}

enum status_enum {
  """Active"""
  active

  """Closed"""
  closed

  """Disabled"""
  disabled
}

"""
Boolean expression to compare columns of type "status_enum". All fields are combined with logical 'AND'.
"""
input status_enum_comparison_exp {
  _eq: status_enum
  _in: [status_enum!]
  _is_null: Boolean
  _neq: status_enum
  _nin: [status_enum!]
}

"""Ordering options when selecting data from "status"."""
input status_order_by {
  description: order_by
  value: order_by
}

"""
select columns of table "status"
"""
enum status_select_column {
  """column name"""
  description

  """column name"""
  value
}

"""
Streaming cursor of the table "status"
"""
input status_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: status_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input status_stream_cursor_value_input {
  description: String
  value: String
}

"""policy subject type enum"""
type subject_type {
  description: String!
  value: String!
}

"""
Boolean expression to filter rows from the table "subject_type". All fields are combined with a logical 'AND'.
"""
input subject_type_bool_exp {
  _and: [subject_type_bool_exp!]
  _not: subject_type_bool_exp
  _or: [subject_type_bool_exp!]
  description: String_comparison_exp
  value: String_comparison_exp
}

enum subject_type_enum {
  """DEVICE"""
  device

  """DEVICE_POOL"""
  device_pool

  """GROUP"""
  group

  """SERVICE_ACCOUNT"""
  service_account

  """USER"""
  user
}

"""
Boolean expression to compare columns of type "subject_type_enum". All fields are combined with logical 'AND'.
"""
input subject_type_enum_comparison_exp {
  _eq: subject_type_enum
  _in: [subject_type_enum!]
  _is_null: Boolean
  _neq: subject_type_enum
  _nin: [subject_type_enum!]
}

"""Ordering options when selecting data from "subject_type"."""
input subject_type_order_by {
  description: order_by
  value: order_by
}

"""
select columns of table "subject_type"
"""
enum subject_type_select_column {
  """column name"""
  description

  """column name"""
  value
}

"""
Streaming cursor of the table "subject_type"
"""
input subject_type_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: subject_type_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input subject_type_stream_cursor_value_input {
  description: String
  value: String
}

type subscription_root {
  """
  fetch data from the table: "action"
  """
  action(
    """distinct select on columns"""
    distinct_on: [action_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [action_order_by!]

    """filter the rows returned"""
    where: action_bool_exp
  ): [action!]!

  """fetch data from the table: "action" using primary key columns"""
  action_by_pk(value: String!): action

  """
  fetch data from the table in a streaming manner: "action"
  """
  action_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [action_stream_cursor_input]!

    """filter the rows returned"""
    where: action_bool_exp
  ): [action!]!

  """
  fetch data from the table: "auth.refresh_tokens" using primary key columns
  """
  authRefreshToken(id: uuid!): authRefreshTokens

  """
  fetch data from the table: "auth.refresh_tokens"
  """
  authRefreshTokens(
    """distinct select on columns"""
    distinct_on: [authRefreshTokens_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [authRefreshTokens_order_by!]

    """filter the rows returned"""
    where: authRefreshTokens_bool_exp
  ): [authRefreshTokens!]!

  """
  fetch aggregated fields from the table: "auth.refresh_tokens"
  """
  authRefreshTokensAggregate(
    """distinct select on columns"""
    distinct_on: [authRefreshTokens_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [authRefreshTokens_order_by!]

    """filter the rows returned"""
    where: authRefreshTokens_bool_exp
  ): authRefreshTokens_aggregate!

  """
  fetch data from the table in a streaming manner: "auth.refresh_tokens"
  """
  authRefreshTokens_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [authRefreshTokens_stream_cursor_input]!

    """filter the rows returned"""
    where: authRefreshTokens_bool_exp
  ): [authRefreshTokens!]!

  """
  fetch data from the table: "auth.user_providers" using primary key columns
  """
  authUserProvider(id: uuid!): authUserProviders

  """
  fetch data from the table: "auth.user_providers"
  """
  authUserProviders(
    """distinct select on columns"""
    distinct_on: [authUserProviders_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [authUserProviders_order_by!]

    """filter the rows returned"""
    where: authUserProviders_bool_exp
  ): [authUserProviders!]!

  """
  fetch aggregated fields from the table: "auth.user_providers"
  """
  authUserProvidersAggregate(
    """distinct select on columns"""
    distinct_on: [authUserProviders_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [authUserProviders_order_by!]

    """filter the rows returned"""
    where: authUserProviders_bool_exp
  ): authUserProviders_aggregate!

  """
  fetch data from the table in a streaming manner: "auth.user_providers"
  """
  authUserProviders_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [authUserProviders_stream_cursor_input]!

    """filter the rows returned"""
    where: authUserProviders_bool_exp
  ): [authUserProviders!]!

  """fetch data from the table: "auth.user_roles" using primary key columns"""
  authUserRole(id: uuid!): authUserRoles

  """
  fetch data from the table: "auth.user_roles"
  """
  authUserRoles(
    """distinct select on columns"""
    distinct_on: [authUserRoles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [authUserRoles_order_by!]

    """filter the rows returned"""
    where: authUserRoles_bool_exp
  ): [authUserRoles!]!

  """
  fetch aggregated fields from the table: "auth.user_roles"
  """
  authUserRolesAggregate(
    """distinct select on columns"""
    distinct_on: [authUserRoles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [authUserRoles_order_by!]

    """filter the rows returned"""
    where: authUserRoles_bool_exp
  ): authUserRoles_aggregate!

  """
  fetch data from the table in a streaming manner: "auth.user_roles"
  """
  authUserRoles_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [authUserRoles_stream_cursor_input]!

    """filter the rows returned"""
    where: authUserRoles_bool_exp
  ): [authUserRoles!]!

  """
  fetch data from the table: "auth.user_security_keys" using primary key columns
  """
  authUserSecurityKey(id: uuid!): authUserSecurityKeys

  """
  fetch data from the table: "auth.user_security_keys"
  """
  authUserSecurityKeys(
    """distinct select on columns"""
    distinct_on: [authUserSecurityKeys_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [authUserSecurityKeys_order_by!]

    """filter the rows returned"""
    where: authUserSecurityKeys_bool_exp
  ): [authUserSecurityKeys!]!

  """
  fetch aggregated fields from the table: "auth.user_security_keys"
  """
  authUserSecurityKeysAggregate(
    """distinct select on columns"""
    distinct_on: [authUserSecurityKeys_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [authUserSecurityKeys_order_by!]

    """filter the rows returned"""
    where: authUserSecurityKeys_bool_exp
  ): authUserSecurityKeys_aggregate!

  """
  fetch data from the table in a streaming manner: "auth.user_security_keys"
  """
  authUserSecurityKeys_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [authUserSecurityKeys_stream_cursor_input]!

    """filter the rows returned"""
    where: authUserSecurityKeys_bool_exp
  ): [authUserSecurityKeys!]!

  """
  execute function "device_associated_pools" which returns "pools"
  """
  device_associated_pools(
    """
    input parameters for function "device_associated_pools"
    """
    args: device_associated_pools_args!

    """distinct select on columns"""
    distinct_on: [pools_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pools_order_by!]

    """filter the rows returned"""
    where: pools_bool_exp
  ): [pools!]!

  """
  execute function "device_associated_pools" and query aggregates on result of table type "pools"
  """
  device_associated_pools_aggregate(
    """
    input parameters for function "device_associated_pools_aggregate"
    """
    args: device_associated_pools_args!

    """distinct select on columns"""
    distinct_on: [pools_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pools_order_by!]

    """filter the rows returned"""
    where: pools_bool_exp
  ): pools_aggregate!

  """
  execute function "device_dissociated_pools" which returns "pools"
  """
  device_dissociated_pools(
    """
    input parameters for function "device_dissociated_pools"
    """
    args: device_dissociated_pools_args!

    """distinct select on columns"""
    distinct_on: [pools_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pools_order_by!]

    """filter the rows returned"""
    where: pools_bool_exp
  ): [pools!]!

  """
  execute function "device_dissociated_pools" and query aggregates on result of table type "pools"
  """
  device_dissociated_pools_aggregate(
    """
    input parameters for function "device_dissociated_pools_aggregate"
    """
    args: device_dissociated_pools_args!

    """distinct select on columns"""
    distinct_on: [pools_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pools_order_by!]

    """filter the rows returned"""
    where: pools_bool_exp
  ): pools_aggregate!

  """
  fetch data from the table: "device_pools"
  """
  device_pools(
    """distinct select on columns"""
    distinct_on: [device_pools_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [device_pools_order_by!]

    """filter the rows returned"""
    where: device_pools_bool_exp
  ): [device_pools!]!

  """
  fetch aggregated fields from the table: "device_pools"
  """
  device_pools_aggregate(
    """distinct select on columns"""
    distinct_on: [device_pools_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [device_pools_order_by!]

    """filter the rows returned"""
    where: device_pools_bool_exp
  ): device_pools_aggregate!

  """fetch data from the table: "device_pools" using primary key columns"""
  device_pools_by_pk(deviceId: uuid!, poolId: uuid!): device_pools

  """
  fetch data from the table in a streaming manner: "device_pools"
  """
  device_pools_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [device_pools_stream_cursor_input]!

    """filter the rows returned"""
    where: device_pools_bool_exp
  ): [device_pools!]!

  """
  fetch data from the table: "devices"
  """
  devices(
    """distinct select on columns"""
    distinct_on: [devices_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [devices_order_by!]

    """filter the rows returned"""
    where: devices_bool_exp
  ): [devices!]!

  """
  fetch aggregated fields from the table: "devices"
  """
  devices_aggregate(
    """distinct select on columns"""
    distinct_on: [devices_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [devices_order_by!]

    """filter the rows returned"""
    where: devices_bool_exp
  ): devices_aggregate!

  """fetch data from the table: "devices" using primary key columns"""
  devices_by_pk(id: uuid!): devices

  """
  fetch data from the table in a streaming manner: "devices"
  """
  devices_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [devices_stream_cursor_input]!

    """filter the rows returned"""
    where: devices_bool_exp
  ): [devices!]!

  """
  fetch data from the table: "direction"
  """
  direction(
    """distinct select on columns"""
    distinct_on: [direction_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [direction_order_by!]

    """filter the rows returned"""
    where: direction_bool_exp
  ): [direction!]!

  """fetch data from the table: "direction" using primary key columns"""
  direction_by_pk(value: String!): direction

  """
  fetch data from the table in a streaming manner: "direction"
  """
  direction_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [direction_stream_cursor_input]!

    """filter the rows returned"""
    where: direction_bool_exp
  ): [direction!]!

  """An array relationship"""
  groups(
    """distinct select on columns"""
    distinct_on: [groups_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [groups_order_by!]

    """filter the rows returned"""
    where: groups_bool_exp
  ): [groups!]!

  """An aggregate relationship"""
  groups_aggregate(
    """distinct select on columns"""
    distinct_on: [groups_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [groups_order_by!]

    """filter the rows returned"""
    where: groups_bool_exp
  ): groups_aggregate!

  """fetch data from the table: "groups" using primary key columns"""
  groups_by_pk(id: uuid!): groups

  """
  fetch data from the table in a streaming manner: "groups"
  """
  groups_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [groups_stream_cursor_input]!

    """filter the rows returned"""
    where: groups_bool_exp
  ): [groups!]!

  """
  fetch data from the table: "organizations"
  """
  organizations(
    """distinct select on columns"""
    distinct_on: [organizations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [organizations_order_by!]

    """filter the rows returned"""
    where: organizations_bool_exp
  ): [organizations!]!

  """
  fetch aggregated fields from the table: "organizations"
  """
  organizations_aggregate(
    """distinct select on columns"""
    distinct_on: [organizations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [organizations_order_by!]

    """filter the rows returned"""
    where: organizations_bool_exp
  ): organizations_aggregate!

  """fetch data from the table: "organizations" using primary key columns"""
  organizations_by_pk(id: uuid!): organizations

  """
  fetch data from the table in a streaming manner: "organizations"
  """
  organizations_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [organizations_stream_cursor_input]!

    """filter the rows returned"""
    where: organizations_bool_exp
  ): [organizations!]!

  """
  fetch data from the table: "plan"
  """
  plan(
    """distinct select on columns"""
    distinct_on: [plan_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [plan_order_by!]

    """filter the rows returned"""
    where: plan_bool_exp
  ): [plan!]!

  """fetch data from the table: "plan" using primary key columns"""
  plan_by_pk(value: String!): plan

  """
  fetch data from the table in a streaming manner: "plan"
  """
  plan_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [plan_stream_cursor_input]!

    """filter the rows returned"""
    where: plan_bool_exp
  ): [plan!]!

  """
  fetch data from the table: "policies"
  """
  policies(
    """distinct select on columns"""
    distinct_on: [policies_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [policies_order_by!]

    """filter the rows returned"""
    where: policies_bool_exp
  ): [policies!]!

  """
  fetch aggregated fields from the table: "policies"
  """
  policies_aggregate(
    """distinct select on columns"""
    distinct_on: [policies_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [policies_order_by!]

    """filter the rows returned"""
    where: policies_bool_exp
  ): policies_aggregate!

  """fetch data from the table: "policies" using primary key columns"""
  policies_by_pk(id: uuid!): policies

  """
  fetch data from the table in a streaming manner: "policies"
  """
  policies_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [policies_stream_cursor_input]!

    """filter the rows returned"""
    where: policies_bool_exp
  ): [policies!]!

  """
  fetch data from the table: "pools"
  """
  pools(
    """distinct select on columns"""
    distinct_on: [pools_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pools_order_by!]

    """filter the rows returned"""
    where: pools_bool_exp
  ): [pools!]!

  """
  fetch aggregated fields from the table: "pools"
  """
  pools_aggregate(
    """distinct select on columns"""
    distinct_on: [pools_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pools_order_by!]

    """filter the rows returned"""
    where: pools_bool_exp
  ): pools_aggregate!

  """fetch data from the table: "pools" using primary key columns"""
  pools_by_pk(id: uuid!): pools

  """
  fetch data from the table in a streaming manner: "pools"
  """
  pools_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [pools_stream_cursor_input]!

    """filter the rows returned"""
    where: pools_bool_exp
  ): [pools!]!

  """
  fetch data from the table: "protocol"
  """
  protocol(
    """distinct select on columns"""
    distinct_on: [protocol_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [protocol_order_by!]

    """filter the rows returned"""
    where: protocol_bool_exp
  ): [protocol!]!

  """fetch data from the table: "protocol" using primary key columns"""
  protocol_by_pk(value: String!): protocol

  """
  fetch data from the table in a streaming manner: "protocol"
  """
  protocol_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [protocol_stream_cursor_input]!

    """filter the rows returned"""
    where: protocol_bool_exp
  ): [protocol!]!

  """
  fetch data from the table: "rules"
  """
  rules(
    """distinct select on columns"""
    distinct_on: [rules_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [rules_order_by!]

    """filter the rows returned"""
    where: rules_bool_exp
  ): [rules!]!

  """
  fetch aggregated fields from the table: "rules"
  """
  rules_aggregate(
    """distinct select on columns"""
    distinct_on: [rules_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [rules_order_by!]

    """filter the rows returned"""
    where: rules_bool_exp
  ): rules_aggregate!

  """fetch data from the table: "rules" using primary key columns"""
  rules_by_pk(id: uuid!): rules

  """
  fetch data from the table in a streaming manner: "rules"
  """
  rules_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [rules_stream_cursor_input]!

    """filter the rows returned"""
    where: rules_bool_exp
  ): [rules!]!

  """
  fetch data from the table: "status"
  """
  status(
    """distinct select on columns"""
    distinct_on: [status_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [status_order_by!]

    """filter the rows returned"""
    where: status_bool_exp
  ): [status!]!

  """fetch data from the table: "status" using primary key columns"""
  status_by_pk(value: String!): status

  """
  fetch data from the table in a streaming manner: "status"
  """
  status_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [status_stream_cursor_input]!

    """filter the rows returned"""
    where: status_bool_exp
  ): [status!]!

  """
  fetch data from the table: "subject_type"
  """
  subject_type(
    """distinct select on columns"""
    distinct_on: [subject_type_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [subject_type_order_by!]

    """filter the rows returned"""
    where: subject_type_bool_exp
  ): [subject_type!]!

  """fetch data from the table: "subject_type" using primary key columns"""
  subject_type_by_pk(value: String!): subject_type

  """
  fetch data from the table in a streaming manner: "subject_type"
  """
  subject_type_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [subject_type_stream_cursor_input]!

    """filter the rows returned"""
    where: subject_type_bool_exp
  ): [subject_type!]!

  """An array relationship"""
  subscriptions(
    """distinct select on columns"""
    distinct_on: [subscriptions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [subscriptions_order_by!]

    """filter the rows returned"""
    where: subscriptions_bool_exp
  ): [subscriptions!]!

  """An aggregate relationship"""
  subscriptions_aggregate(
    """distinct select on columns"""
    distinct_on: [subscriptions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [subscriptions_order_by!]

    """filter the rows returned"""
    where: subscriptions_bool_exp
  ): subscriptions_aggregate!

  """fetch data from the table: "subscriptions" using primary key columns"""
  subscriptions_by_pk(id: uuid!): subscriptions

  """
  fetch data from the table in a streaming manner: "subscriptions"
  """
  subscriptions_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [subscriptions_stream_cursor_input]!

    """filter the rows returned"""
    where: subscriptions_bool_exp
  ): [subscriptions!]!

  """fetch data from the table: "auth.users" using primary key columns"""
  user(id: uuid!): users

  """
  execute function "user_associated_groups" which returns "groups"
  """
  user_associated_groups(
    """
    input parameters for function "user_associated_groups"
    """
    args: user_associated_groups_args!

    """distinct select on columns"""
    distinct_on: [groups_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [groups_order_by!]

    """filter the rows returned"""
    where: groups_bool_exp
  ): [groups!]!

  """
  execute function "user_associated_groups" and query aggregates on result of table type "groups"
  """
  user_associated_groups_aggregate(
    """
    input parameters for function "user_associated_groups_aggregate"
    """
    args: user_associated_groups_args!

    """distinct select on columns"""
    distinct_on: [groups_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [groups_order_by!]

    """filter the rows returned"""
    where: groups_bool_exp
  ): groups_aggregate!

  """
  execute function "user_dissociated_groups" which returns "groups"
  """
  user_dissociated_groups(
    """
    input parameters for function "user_dissociated_groups"
    """
    args: user_dissociated_groups_args!

    """distinct select on columns"""
    distinct_on: [groups_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [groups_order_by!]

    """filter the rows returned"""
    where: groups_bool_exp
  ): [groups!]!

  """
  execute function "user_dissociated_groups" and query aggregates on result of table type "groups"
  """
  user_dissociated_groups_aggregate(
    """
    input parameters for function "user_dissociated_groups_aggregate"
    """
    args: user_dissociated_groups_args!

    """distinct select on columns"""
    distinct_on: [groups_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [groups_order_by!]

    """filter the rows returned"""
    where: groups_bool_exp
  ): groups_aggregate!

  """
  fetch data from the table: "user_groups"
  """
  user_groups(
    """distinct select on columns"""
    distinct_on: [user_groups_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_groups_order_by!]

    """filter the rows returned"""
    where: user_groups_bool_exp
  ): [user_groups!]!

  """
  fetch aggregated fields from the table: "user_groups"
  """
  user_groups_aggregate(
    """distinct select on columns"""
    distinct_on: [user_groups_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_groups_order_by!]

    """filter the rows returned"""
    where: user_groups_bool_exp
  ): user_groups_aggregate!

  """fetch data from the table: "user_groups" using primary key columns"""
  user_groups_by_pk(groupId: uuid!, userId: uuid!): user_groups

  """
  fetch data from the table in a streaming manner: "user_groups"
  """
  user_groups_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [user_groups_stream_cursor_input]!

    """filter the rows returned"""
    where: user_groups_bool_exp
  ): [user_groups!]!

  """
  fetch data from the table: "user_org_roles"
  """
  user_org_roles(
    """distinct select on columns"""
    distinct_on: [user_org_roles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_org_roles_order_by!]

    """filter the rows returned"""
    where: user_org_roles_bool_exp
  ): [user_org_roles!]!

  """
  fetch aggregated fields from the table: "user_org_roles"
  """
  user_org_roles_aggregate(
    """distinct select on columns"""
    distinct_on: [user_org_roles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_org_roles_order_by!]

    """filter the rows returned"""
    where: user_org_roles_bool_exp
  ): user_org_roles_aggregate!

  """fetch data from the table: "user_org_roles" using primary key columns"""
  user_org_roles_by_pk(orgId: uuid!, userId: uuid!): user_org_roles

  """
  fetch data from the table in a streaming manner: "user_org_roles"
  """
  user_org_roles_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [user_org_roles_stream_cursor_input]!

    """filter the rows returned"""
    where: user_org_roles_bool_exp
  ): [user_org_roles!]!

  """
  fetch data from the table: "auth.users"
  """
  users(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): [users!]!

  """
  fetch aggregated fields from the table: "auth.users"
  """
  usersAggregate(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): users_aggregate!

  """
  fetch data from the table in a streaming manner: "auth.users"
  """
  users_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [users_stream_cursor_input]!

    """filter the rows returned"""
    where: users_bool_exp
  ): [users!]!
}

"""Table containing subscriptions for an organization"""
type subscriptions {
  createdAt: timestamptz!
  createdBy: uuid!
  credits: Int!
  id: uuid!
  orgId: uuid!

  """An object relationship"""
  organization: organizations!
  plan: plan_enum!
  status: status_enum!
  stripeCheckoutSessionId: String
  stripeCustomerId: String
  stripeSubscriptionId: String
  updatedAt: timestamptz!
  updatedBy: uuid!
  validUntil: timestamptz!
}

"""
aggregated selection of "subscriptions"
"""
type subscriptions_aggregate {
  aggregate: subscriptions_aggregate_fields
  nodes: [subscriptions!]!
}

input subscriptions_aggregate_bool_exp {
  count: subscriptions_aggregate_bool_exp_count
}

input subscriptions_aggregate_bool_exp_count {
  arguments: [subscriptions_select_column!]
  distinct: Boolean
  filter: subscriptions_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "subscriptions"
"""
type subscriptions_aggregate_fields {
  avg: subscriptions_avg_fields
  count(columns: [subscriptions_select_column!], distinct: Boolean): Int!
  max: subscriptions_max_fields
  min: subscriptions_min_fields
  stddev: subscriptions_stddev_fields
  stddev_pop: subscriptions_stddev_pop_fields
  stddev_samp: subscriptions_stddev_samp_fields
  sum: subscriptions_sum_fields
  var_pop: subscriptions_var_pop_fields
  var_samp: subscriptions_var_samp_fields
  variance: subscriptions_variance_fields
}

"""
order by aggregate values of table "subscriptions"
"""
input subscriptions_aggregate_order_by {
  avg: subscriptions_avg_order_by
  count: order_by
  max: subscriptions_max_order_by
  min: subscriptions_min_order_by
  stddev: subscriptions_stddev_order_by
  stddev_pop: subscriptions_stddev_pop_order_by
  stddev_samp: subscriptions_stddev_samp_order_by
  sum: subscriptions_sum_order_by
  var_pop: subscriptions_var_pop_order_by
  var_samp: subscriptions_var_samp_order_by
  variance: subscriptions_variance_order_by
}

"""aggregate avg on columns"""
type subscriptions_avg_fields {
  credits: Float
}

"""
order by avg() on columns of table "subscriptions"
"""
input subscriptions_avg_order_by {
  credits: order_by
}

"""
Boolean expression to filter rows from the table "subscriptions". All fields are combined with a logical 'AND'.
"""
input subscriptions_bool_exp {
  _and: [subscriptions_bool_exp!]
  _not: subscriptions_bool_exp
  _or: [subscriptions_bool_exp!]
  createdAt: timestamptz_comparison_exp
  createdBy: uuid_comparison_exp
  credits: Int_comparison_exp
  id: uuid_comparison_exp
  orgId: uuid_comparison_exp
  organization: organizations_bool_exp
  plan: plan_enum_comparison_exp
  status: status_enum_comparison_exp
  stripeCheckoutSessionId: String_comparison_exp
  stripeCustomerId: String_comparison_exp
  stripeSubscriptionId: String_comparison_exp
  updatedAt: timestamptz_comparison_exp
  updatedBy: uuid_comparison_exp
  validUntil: timestamptz_comparison_exp
}

"""aggregate max on columns"""
type subscriptions_max_fields {
  createdAt: timestamptz
  createdBy: uuid
  credits: Int
  id: uuid
  orgId: uuid
  stripeCheckoutSessionId: String
  stripeCustomerId: String
  stripeSubscriptionId: String
  updatedAt: timestamptz
  updatedBy: uuid
  validUntil: timestamptz
}

"""
order by max() on columns of table "subscriptions"
"""
input subscriptions_max_order_by {
  createdAt: order_by
  createdBy: order_by
  credits: order_by
  id: order_by
  orgId: order_by
  stripeCheckoutSessionId: order_by
  stripeCustomerId: order_by
  stripeSubscriptionId: order_by
  updatedAt: order_by
  updatedBy: order_by
  validUntil: order_by
}

"""aggregate min on columns"""
type subscriptions_min_fields {
  createdAt: timestamptz
  createdBy: uuid
  credits: Int
  id: uuid
  orgId: uuid
  stripeCheckoutSessionId: String
  stripeCustomerId: String
  stripeSubscriptionId: String
  updatedAt: timestamptz
  updatedBy: uuid
  validUntil: timestamptz
}

"""
order by min() on columns of table "subscriptions"
"""
input subscriptions_min_order_by {
  createdAt: order_by
  createdBy: order_by
  credits: order_by
  id: order_by
  orgId: order_by
  stripeCheckoutSessionId: order_by
  stripeCustomerId: order_by
  stripeSubscriptionId: order_by
  updatedAt: order_by
  updatedBy: order_by
  validUntil: order_by
}

"""Ordering options when selecting data from "subscriptions"."""
input subscriptions_order_by {
  createdAt: order_by
  createdBy: order_by
  credits: order_by
  id: order_by
  orgId: order_by
  organization: organizations_order_by
  plan: order_by
  status: order_by
  stripeCheckoutSessionId: order_by
  stripeCustomerId: order_by
  stripeSubscriptionId: order_by
  updatedAt: order_by
  updatedBy: order_by
  validUntil: order_by
}

"""
select columns of table "subscriptions"
"""
enum subscriptions_select_column {
  """column name"""
  createdAt

  """column name"""
  createdBy

  """column name"""
  credits

  """column name"""
  id

  """column name"""
  orgId

  """column name"""
  plan

  """column name"""
  status

  """column name"""
  stripeCheckoutSessionId

  """column name"""
  stripeCustomerId

  """column name"""
  stripeSubscriptionId

  """column name"""
  updatedAt

  """column name"""
  updatedBy

  """column name"""
  validUntil
}

"""aggregate stddev on columns"""
type subscriptions_stddev_fields {
  credits: Float
}

"""
order by stddev() on columns of table "subscriptions"
"""
input subscriptions_stddev_order_by {
  credits: order_by
}

"""aggregate stddev_pop on columns"""
type subscriptions_stddev_pop_fields {
  credits: Float
}

"""
order by stddev_pop() on columns of table "subscriptions"
"""
input subscriptions_stddev_pop_order_by {
  credits: order_by
}

"""aggregate stddev_samp on columns"""
type subscriptions_stddev_samp_fields {
  credits: Float
}

"""
order by stddev_samp() on columns of table "subscriptions"
"""
input subscriptions_stddev_samp_order_by {
  credits: order_by
}

"""
Streaming cursor of the table "subscriptions"
"""
input subscriptions_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: subscriptions_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input subscriptions_stream_cursor_value_input {
  createdAt: timestamptz
  createdBy: uuid
  credits: Int
  id: uuid
  orgId: uuid
  plan: plan_enum
  status: status_enum
  stripeCheckoutSessionId: String
  stripeCustomerId: String
  stripeSubscriptionId: String
  updatedAt: timestamptz
  updatedBy: uuid
  validUntil: timestamptz
}

"""aggregate sum on columns"""
type subscriptions_sum_fields {
  credits: Int
}

"""
order by sum() on columns of table "subscriptions"
"""
input subscriptions_sum_order_by {
  credits: order_by
}

"""aggregate var_pop on columns"""
type subscriptions_var_pop_fields {
  credits: Float
}

"""
order by var_pop() on columns of table "subscriptions"
"""
input subscriptions_var_pop_order_by {
  credits: order_by
}

"""aggregate var_samp on columns"""
type subscriptions_var_samp_fields {
  credits: Float
}

"""
order by var_samp() on columns of table "subscriptions"
"""
input subscriptions_var_samp_order_by {
  credits: order_by
}

"""aggregate variance on columns"""
type subscriptions_variance_fields {
  credits: Float
}

"""
order by variance() on columns of table "subscriptions"
"""
input subscriptions_variance_order_by {
  credits: order_by
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

input user_associated_groups_args {
  user_row: users_scalar
}

input user_dissociated_groups_args {
  user_row: users_scalar
}

"""User to Group association table"""
type user_groups {
  """An object relationship"""
  group: groups!
  groupId: uuid!

  """An object relationship"""
  user: users!
  userId: uuid!
}

"""
aggregated selection of "user_groups"
"""
type user_groups_aggregate {
  aggregate: user_groups_aggregate_fields
  nodes: [user_groups!]!
}

"""
aggregate fields of "user_groups"
"""
type user_groups_aggregate_fields {
  count(columns: [user_groups_select_column!], distinct: Boolean): Int!
  max: user_groups_max_fields
  min: user_groups_min_fields
}

"""
Boolean expression to filter rows from the table "user_groups". All fields are combined with a logical 'AND'.
"""
input user_groups_bool_exp {
  _and: [user_groups_bool_exp!]
  _not: user_groups_bool_exp
  _or: [user_groups_bool_exp!]
  group: groups_bool_exp
  groupId: uuid_comparison_exp
  user: users_bool_exp
  userId: uuid_comparison_exp
}

"""
unique or primary key constraints on table "user_groups"
"""
enum user_groups_constraint {
  """
  unique or primary key constraint on columns "user_id", "group_id"
  """
  user_groups_pkey
}

"""
input type for inserting data into table "user_groups"
"""
input user_groups_insert_input {
  group: groups_obj_rel_insert_input
  groupId: uuid
  userId: uuid
}

"""aggregate max on columns"""
type user_groups_max_fields {
  groupId: uuid
  userId: uuid
}

"""aggregate min on columns"""
type user_groups_min_fields {
  groupId: uuid
  userId: uuid
}

"""
response of any mutation on the table "user_groups"
"""
type user_groups_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [user_groups!]!
}

"""
on_conflict condition type for table "user_groups"
"""
input user_groups_on_conflict {
  constraint: user_groups_constraint!
  update_columns: [user_groups_update_column!]! = []
  where: user_groups_bool_exp
}

"""Ordering options when selecting data from "user_groups"."""
input user_groups_order_by {
  group: groups_order_by
  groupId: order_by
  user: users_order_by
  userId: order_by
}

"""
select columns of table "user_groups"
"""
enum user_groups_select_column {
  """column name"""
  groupId

  """column name"""
  userId
}

"""
Streaming cursor of the table "user_groups"
"""
input user_groups_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: user_groups_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input user_groups_stream_cursor_value_input {
  groupId: uuid
  userId: uuid
}

"""
placeholder for update columns of table "user_groups" (current role has no relevant permissions)
"""
enum user_groups_update_column {
  """placeholder (do not use)"""
  _PLACEHOLDER
}

"""Table containing user's org and default_role"""
type user_org_roles {
  createdAt: timestamptz!
  createdBy: uuid!
  isCurrentOrg: Boolean!
  orgId: uuid!

  """An object relationship"""
  organization: organizations!
  role: String!
  updatedAt: timestamptz!
  updatedBy: uuid!

  """An object relationship"""
  user: users!
  userId: uuid!
}

"""
aggregated selection of "user_org_roles"
"""
type user_org_roles_aggregate {
  aggregate: user_org_roles_aggregate_fields
  nodes: [user_org_roles!]!
}

input user_org_roles_aggregate_bool_exp {
  bool_and: user_org_roles_aggregate_bool_exp_bool_and
  bool_or: user_org_roles_aggregate_bool_exp_bool_or
  count: user_org_roles_aggregate_bool_exp_count
}

input user_org_roles_aggregate_bool_exp_bool_and {
  arguments: user_org_roles_select_column_user_org_roles_aggregate_bool_exp_bool_and_arguments_columns!
  distinct: Boolean
  filter: user_org_roles_bool_exp
  predicate: Boolean_comparison_exp!
}

input user_org_roles_aggregate_bool_exp_bool_or {
  arguments: user_org_roles_select_column_user_org_roles_aggregate_bool_exp_bool_or_arguments_columns!
  distinct: Boolean
  filter: user_org_roles_bool_exp
  predicate: Boolean_comparison_exp!
}

input user_org_roles_aggregate_bool_exp_count {
  arguments: [user_org_roles_select_column!]
  distinct: Boolean
  filter: user_org_roles_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "user_org_roles"
"""
type user_org_roles_aggregate_fields {
  count(columns: [user_org_roles_select_column!], distinct: Boolean): Int!
  max: user_org_roles_max_fields
  min: user_org_roles_min_fields
}

"""
order by aggregate values of table "user_org_roles"
"""
input user_org_roles_aggregate_order_by {
  count: order_by
  max: user_org_roles_max_order_by
  min: user_org_roles_min_order_by
}

"""
input type for inserting array relation for remote table "user_org_roles"
"""
input user_org_roles_arr_rel_insert_input {
  data: [user_org_roles_insert_input!]!

  """upsert condition"""
  on_conflict: user_org_roles_on_conflict
}

"""
Boolean expression to filter rows from the table "user_org_roles". All fields are combined with a logical 'AND'.
"""
input user_org_roles_bool_exp {
  _and: [user_org_roles_bool_exp!]
  _not: user_org_roles_bool_exp
  _or: [user_org_roles_bool_exp!]
  createdAt: timestamptz_comparison_exp
  createdBy: uuid_comparison_exp
  isCurrentOrg: Boolean_comparison_exp
  orgId: uuid_comparison_exp
  organization: organizations_bool_exp
  role: String_comparison_exp
  updatedAt: timestamptz_comparison_exp
  updatedBy: uuid_comparison_exp
  user: users_bool_exp
  userId: uuid_comparison_exp
}

"""
unique or primary key constraints on table "user_org_roles"
"""
enum user_org_roles_constraint {
  """
  unique or primary key constraint on columns "user_id", "org_id"
  """
  user_org_roles_pkey

  """
  unique or primary key constraint on columns "user_id"
  """
  user_org_roles_unique_current_org
}

"""
input type for inserting data into table "user_org_roles"
"""
input user_org_roles_insert_input {
  isCurrentOrg: Boolean
  orgId: uuid
  organization: organizations_obj_rel_insert_input
  role: String
  userId: uuid
}

"""aggregate max on columns"""
type user_org_roles_max_fields {
  createdAt: timestamptz
  createdBy: uuid
  orgId: uuid
  role: String
  updatedAt: timestamptz
  updatedBy: uuid
  userId: uuid
}

"""
order by max() on columns of table "user_org_roles"
"""
input user_org_roles_max_order_by {
  createdAt: order_by
  createdBy: order_by
  orgId: order_by
  role: order_by
  updatedAt: order_by
  updatedBy: order_by
  userId: order_by
}

"""aggregate min on columns"""
type user_org_roles_min_fields {
  createdAt: timestamptz
  createdBy: uuid
  orgId: uuid
  role: String
  updatedAt: timestamptz
  updatedBy: uuid
  userId: uuid
}

"""
order by min() on columns of table "user_org_roles"
"""
input user_org_roles_min_order_by {
  createdAt: order_by
  createdBy: order_by
  orgId: order_by
  role: order_by
  updatedAt: order_by
  updatedBy: order_by
  userId: order_by
}

"""
response of any mutation on the table "user_org_roles"
"""
type user_org_roles_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [user_org_roles!]!
}

"""
on_conflict condition type for table "user_org_roles"
"""
input user_org_roles_on_conflict {
  constraint: user_org_roles_constraint!
  update_columns: [user_org_roles_update_column!]! = []
  where: user_org_roles_bool_exp
}

"""Ordering options when selecting data from "user_org_roles"."""
input user_org_roles_order_by {
  createdAt: order_by
  createdBy: order_by
  isCurrentOrg: order_by
  orgId: order_by
  organization: organizations_order_by
  role: order_by
  updatedAt: order_by
  updatedBy: order_by
  user: users_order_by
  userId: order_by
}

"""primary key columns input for table: user_org_roles"""
input user_org_roles_pk_columns_input {
  orgId: uuid!
  userId: uuid!
}

"""
select columns of table "user_org_roles"
"""
enum user_org_roles_select_column {
  """column name"""
  createdAt

  """column name"""
  createdBy

  """column name"""
  isCurrentOrg

  """column name"""
  orgId

  """column name"""
  role

  """column name"""
  updatedAt

  """column name"""
  updatedBy

  """column name"""
  userId
}

"""
select "user_org_roles_aggregate_bool_exp_bool_and_arguments_columns" columns of table "user_org_roles"
"""
enum user_org_roles_select_column_user_org_roles_aggregate_bool_exp_bool_and_arguments_columns {
  """column name"""
  isCurrentOrg
}

"""
select "user_org_roles_aggregate_bool_exp_bool_or_arguments_columns" columns of table "user_org_roles"
"""
enum user_org_roles_select_column_user_org_roles_aggregate_bool_exp_bool_or_arguments_columns {
  """column name"""
  isCurrentOrg
}

"""
input type for updating data in table "user_org_roles"
"""
input user_org_roles_set_input {
  isCurrentOrg: Boolean
  role: String
}

"""
Streaming cursor of the table "user_org_roles"
"""
input user_org_roles_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: user_org_roles_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input user_org_roles_stream_cursor_value_input {
  createdAt: timestamptz
  createdBy: uuid
  isCurrentOrg: Boolean
  orgId: uuid
  role: String
  updatedAt: timestamptz
  updatedBy: uuid
  userId: uuid
}

"""
update columns of table "user_org_roles"
"""
enum user_org_roles_update_column {
  """column name"""
  isCurrentOrg

  """column name"""
  role
}

input user_org_roles_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: user_org_roles_set_input

  """filter the rows which have to be updated"""
  where: user_org_roles_bool_exp!
}

"""
User account information. Don't modify its structure as Hasura Auth relies on it to function properly.
"""
type users {
  activeMfaType: String

  """An array relationship"""
  allowedOrgs(
    """distinct select on columns"""
    distinct_on: [user_org_roles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_org_roles_order_by!]

    """filter the rows returned"""
    where: user_org_roles_bool_exp
  ): [user_org_roles!]!

  """An aggregate relationship"""
  allowedOrgs_aggregate(
    """distinct select on columns"""
    distinct_on: [user_org_roles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_org_roles_order_by!]

    """filter the rows returned"""
    where: user_org_roles_bool_exp
  ): user_org_roles_aggregate!

  """Used as Computed Field on Users Table"""
  associatedGroups(
    """distinct select on columns"""
    distinct_on: [groups_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [groups_order_by!]

    """filter the rows returned"""
    where: groups_bool_exp
  ): [groups!]
  avatarUrl: String!
  createdAt: timestamptz!

  """Function Used as Computed Field on Users Table"""
  currentOrgId: uuid
  defaultRole: String!
  disabled: Boolean!
  displayName: String!

  """Used as Computed Field on Users Table"""
  dissociatedGroups(
    """distinct select on columns"""
    distinct_on: [groups_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [groups_order_by!]

    """filter the rows returned"""
    where: groups_bool_exp
  ): [groups!]
  email: citext
  emailVerified: Boolean!
  id: uuid!
  isAnonymous: Boolean!
  lastSeen: timestamptz
  locale: String!
  metadata(
    """JSON select path"""
    path: String
  ): jsonb
  phoneNumber: String
  phoneNumberVerified: Boolean!

  """An array relationship"""
  refreshTokens(
    """distinct select on columns"""
    distinct_on: [authRefreshTokens_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [authRefreshTokens_order_by!]

    """filter the rows returned"""
    where: authRefreshTokens_bool_exp
  ): [authRefreshTokens!]!

  """An aggregate relationship"""
  refreshTokens_aggregate(
    """distinct select on columns"""
    distinct_on: [authRefreshTokens_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [authRefreshTokens_order_by!]

    """filter the rows returned"""
    where: authRefreshTokens_bool_exp
  ): authRefreshTokens_aggregate!

  """An array relationship"""
  roles(
    """distinct select on columns"""
    distinct_on: [authUserRoles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [authUserRoles_order_by!]

    """filter the rows returned"""
    where: authUserRoles_bool_exp
  ): [authUserRoles!]!

  """An aggregate relationship"""
  roles_aggregate(
    """distinct select on columns"""
    distinct_on: [authUserRoles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [authUserRoles_order_by!]

    """filter the rows returned"""
    where: authUserRoles_bool_exp
  ): authUserRoles_aggregate!

  """An array relationship"""
  securityKeys(
    """distinct select on columns"""
    distinct_on: [authUserSecurityKeys_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [authUserSecurityKeys_order_by!]

    """filter the rows returned"""
    where: authUserSecurityKeys_bool_exp
  ): [authUserSecurityKeys!]!

  """An aggregate relationship"""
  securityKeys_aggregate(
    """distinct select on columns"""
    distinct_on: [authUserSecurityKeys_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [authUserSecurityKeys_order_by!]

    """filter the rows returned"""
    where: authUserSecurityKeys_bool_exp
  ): authUserSecurityKeys_aggregate!
  updatedAt: timestamptz!

  """An array relationship"""
  userProviders(
    """distinct select on columns"""
    distinct_on: [authUserProviders_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [authUserProviders_order_by!]

    """filter the rows returned"""
    where: authUserProviders_bool_exp
  ): [authUserProviders!]!

  """An aggregate relationship"""
  userProviders_aggregate(
    """distinct select on columns"""
    distinct_on: [authUserProviders_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [authUserProviders_order_by!]

    """filter the rows returned"""
    where: authUserProviders_bool_exp
  ): authUserProviders_aggregate!
}

"""
aggregated selection of "auth.users"
"""
type users_aggregate {
  aggregate: users_aggregate_fields
  nodes: [users!]!
}

"""
aggregate fields of "auth.users"
"""
type users_aggregate_fields {
  count(columns: [users_select_column!], distinct: Boolean): Int!
  max: users_max_fields
  min: users_min_fields
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input users_append_input {
  metadata: jsonb
}

"""
Boolean expression to filter rows from the table "auth.users". All fields are combined with a logical 'AND'.
"""
input users_bool_exp {
  _and: [users_bool_exp!]
  _not: users_bool_exp
  _or: [users_bool_exp!]
  activeMfaType: String_comparison_exp
  allowedOrgs: user_org_roles_bool_exp
  allowedOrgs_aggregate: user_org_roles_aggregate_bool_exp
  associatedGroups: groups_bool_exp
  avatarUrl: String_comparison_exp
  createdAt: timestamptz_comparison_exp
  currentOrgId: uuid_comparison_exp
  defaultRole: String_comparison_exp
  disabled: Boolean_comparison_exp
  displayName: String_comparison_exp
  dissociatedGroups: groups_bool_exp
  email: citext_comparison_exp
  emailVerified: Boolean_comparison_exp
  id: uuid_comparison_exp
  isAnonymous: Boolean_comparison_exp
  lastSeen: timestamptz_comparison_exp
  locale: String_comparison_exp
  metadata: jsonb_comparison_exp
  phoneNumber: String_comparison_exp
  phoneNumberVerified: Boolean_comparison_exp
  refreshTokens: authRefreshTokens_bool_exp
  refreshTokens_aggregate: authRefreshTokens_aggregate_bool_exp
  roles: authUserRoles_bool_exp
  roles_aggregate: authUserRoles_aggregate_bool_exp
  securityKeys: authUserSecurityKeys_bool_exp
  securityKeys_aggregate: authUserSecurityKeys_aggregate_bool_exp
  updatedAt: timestamptz_comparison_exp
  userProviders: authUserProviders_bool_exp
  userProviders_aggregate: authUserProviders_aggregate_bool_exp
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input users_delete_at_path_input {
  metadata: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input users_delete_elem_input {
  metadata: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input users_delete_key_input {
  metadata: String
}

"""aggregate max on columns"""
type users_max_fields {
  activeMfaType: String
  avatarUrl: String
  createdAt: timestamptz

  """Function Used as Computed Field on Users Table"""
  currentOrgId: uuid
  defaultRole: String
  displayName: String
  email: citext
  id: uuid
  lastSeen: timestamptz
  locale: String
  phoneNumber: String
  updatedAt: timestamptz
}

"""aggregate min on columns"""
type users_min_fields {
  activeMfaType: String
  avatarUrl: String
  createdAt: timestamptz

  """Function Used as Computed Field on Users Table"""
  currentOrgId: uuid
  defaultRole: String
  displayName: String
  email: citext
  id: uuid
  lastSeen: timestamptz
  locale: String
  phoneNumber: String
  updatedAt: timestamptz
}

"""
response of any mutation on the table "auth.users"
"""
type users_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [users!]!
}

"""Ordering options when selecting data from "auth.users"."""
input users_order_by {
  activeMfaType: order_by
  allowedOrgs_aggregate: user_org_roles_aggregate_order_by
  associatedGroups_aggregate: groups_aggregate_order_by
  avatarUrl: order_by
  createdAt: order_by
  currentOrgId: order_by
  defaultRole: order_by
  disabled: order_by
  displayName: order_by
  dissociatedGroups_aggregate: groups_aggregate_order_by
  email: order_by
  emailVerified: order_by
  id: order_by
  isAnonymous: order_by
  lastSeen: order_by
  locale: order_by
  metadata: order_by
  phoneNumber: order_by
  phoneNumberVerified: order_by
  refreshTokens_aggregate: authRefreshTokens_aggregate_order_by
  roles_aggregate: authUserRoles_aggregate_order_by
  securityKeys_aggregate: authUserSecurityKeys_aggregate_order_by
  updatedAt: order_by
  userProviders_aggregate: authUserProviders_aggregate_order_by
}

"""primary key columns input for table: auth.users"""
input users_pk_columns_input {
  id: uuid!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input users_prepend_input {
  metadata: jsonb
}

scalar users_scalar

"""
select columns of table "auth.users"
"""
enum users_select_column {
  """column name"""
  activeMfaType

  """column name"""
  avatarUrl

  """column name"""
  createdAt

  """column name"""
  defaultRole

  """column name"""
  disabled

  """column name"""
  displayName

  """column name"""
  email

  """column name"""
  emailVerified

  """column name"""
  id

  """column name"""
  isAnonymous

  """column name"""
  lastSeen

  """column name"""
  locale

  """column name"""
  metadata

  """column name"""
  phoneNumber

  """column name"""
  phoneNumberVerified

  """column name"""
  updatedAt
}

"""
input type for updating data in table "auth.users"
"""
input users_set_input {
  avatarUrl: String
  defaultRole: String
  disabled: Boolean
  displayName: String
  email: citext
  locale: String
  metadata: jsonb
}

"""
Streaming cursor of the table "users"
"""
input users_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: users_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input users_stream_cursor_value_input {
  activeMfaType: String
  avatarUrl: String
  createdAt: timestamptz
  defaultRole: String
  disabled: Boolean
  displayName: String
  email: citext
  emailVerified: Boolean
  id: uuid
  isAnonymous: Boolean
  lastSeen: timestamptz
  locale: String
  metadata: jsonb
  phoneNumber: String
  phoneNumberVerified: Boolean
  updatedAt: timestamptz
}

input users_updates {
  """append existing jsonb value of filtered columns with new jsonb value"""
  _append: users_append_input

  """
  delete the field or element with specified path (for JSON arrays, negative integers count from the end)
  """
  _delete_at_path: users_delete_at_path_input

  """
  delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
  """
  _delete_elem: users_delete_elem_input

  """
  delete key/value pair or string element. key/value pairs are matched based on their key value
  """
  _delete_key: users_delete_key_input

  """prepend existing jsonb value of filtered columns with new jsonb value"""
  _prepend: users_prepend_input

  """sets the columns of the filtered rows to the given values"""
  _set: users_set_input

  """filter the rows which have to be updated"""
  where: users_bool_exp!
}

scalar uuid

"""
Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'.
"""
input uuid_comparison_exp {
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid!]
  _is_null: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid!]
}
