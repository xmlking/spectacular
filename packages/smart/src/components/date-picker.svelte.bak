<script lang="ts">
import { ErrorMessage } from '@spectacular/skeleton/components/form';
import { Logger } from '@spectacular/utils';
import { z } from 'zod';
import { DatePicker } from '@svelte-plugins/datepicker';
import { format } from 'date-fns';
import type { HTMLInputAttributes } from 'svelte/elements';
interface $$Props extends HTMLInputAttributes {
  startDate?: string | null;
  name?: string | null;
  api?: Readonly<string>;
}

// Props
export let startDate: string | null = null;
export let name: string | null = null;
export let api: string = '/api/date';

// Variables
const log = new Logger('ai:date-picker:browser');
let prompt = '';
let loading = false;
let error: string;
const controller = new AbortController();
// let startDate = new Date();
const dateFormat = 'dd-MM-yyyy, hh:mm a';
let isOpen = false;

// Functions
const toggleDatePicker = () => {
  isOpen = !isOpen;
};
const formatDate = (dateString: Date) => {
  return (dateString && format(new Date(dateString), dateFormat)) || '';
};

let formattedDate = formatDate(startDate);

const onChange = () => {
  try {
    console.log({ formattedDate });
    const parse = Date.parse(formattedDate);
    if (Number.isNaN(parse)) {
      return;
    }
    startDate = new Date(parse);
    // startDate = new Date(formattedDate);
  } catch (err) {
    log.error(err);
    error = `${err}`;
  }
};

$: formattedDate = formatDate(startDate);

// TODO: useObject is not yet supported for svelte https://sdk.vercel.ai/docs/ai-sdk-ui/overview
const useRemoteModel = async (event: SubmitEvent) => {
  try {
    loading = true;
    const rawResponse = await fetch(api, {
      method: 'POST',
      headers: {
        Accept: 'application/json',
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ prompt: formattedDate }),
    });
    const content = await rawResponse.json();
    if (content?.date) {
      startDate = content?.date;
      //value =  new Date().toISOString().slice(0,16)
    }
    loading = false;
  } catch (err) {
    log.error(err);
    error = `${err}`;
  } finally {
    loading = false;
  }
};

const grammar = {
  type: 'object',
  properties: {
    predicted_date: {
      type: 'string',
      format: 'date-time',
    },
  },
  required: ['predicted_date'],
  additionalProperties: false,
};

const useLocalLocal = async (event: SubmitEvent) => {
  let session;
  try {
    loading = true;

    session = await window.aibrow.coreModel.create({ grammar, model: undefined });
    const resp = await session.prompt(
      `The current ISO datetime is: ${new Date().toISOString()}. Extract the data from the following: ${prompt}`,
    );
    log.debug(resp);

    const predicted_date = JSON.parse(resp)?.predicted_date;
    // value = predicted_date.slice(0, 16);
    startDate = predicted_date.slice(0, 16);
    prompt = '';
    loading = false;
  } catch (err) {
    log.error(err);
    error = `${err}`;
  } finally {
    session?.destroy();
    loading = false;
  }
};
</script>

<form
  class="flex flex-col items-center"
  on:submit|preventDefault={(event) => {
    window.ai?.languageModel ? useLocalLocal(event) : useRemoteModel(event);
  }}
>
  <DatePicker
    bind:isOpen
    bind:startDate
    {...$$props}
    enablePastDates
    enableFutureDates
    showTimePicker
  >
    <input
      name="startDate"
      class="input"
      type="text"
      bind:value={formattedDate}
      on:change={onChange}
      on:click={toggleDatePicker}
    />
  </DatePicker>
    <ErrorMessage {error} />
</form>
